<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | 島嶼の患者]]></title>
  <link href="http://hyanwang.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://hyanwang.github.io/"/>
  <updated>2013-10-01T11:46:56+08:00</updated>
  <id>http://hyanwang.github.io/</id>
  <author>
    <name><![CDATA[Hi Yen Wong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rails namespace]]></title>
    <link href="http://hyanwang.github.io/blog/2013/09/28/rails-namespace/"/>
    <updated>2013-09-28T18:17:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/09/28/rails-namespace</id>
    <content type="html"><![CDATA[<h1>关于rails中的namespace</h1>

<p>namespace可以将某些控制器集中在一个区域下，从而可以有效地权限管理等操作。</p>

<p><code>
rails g controller admin/managers
</code></p>

<p>我们可以用以上的命令创建在一个namespace下的控制器<code>manager</code></p>

<p>当然也需要在<code>route.rb</code>下配置你的route中的namespace</p>

<p>``` ruby
namespace :admin do</p>

<pre><code>post 'manager/users'
get  'manager/pushTasks'
</code></pre>

<p>end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails中post]]></title>
    <link href="http://hyanwang.github.io/blog/2013/08/11/rails-post/"/>
    <updated>2013-08-11T22:15:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/08/11/rails-post</id>
    <content type="html"><![CDATA[<h1>Form Helper basic</h1>

<p>view中设置其表单，其中<code>form_tag</code>定义提交给谁和用什么方法
<code>ruby Form表单提交给helo
&lt;%= form_tag("helo",method: 'post') do %&gt;
&lt;%= label_tag(:search, "search for:") %&gt;
&lt;%= text_field_tag(:search) %&gt;
&lt;%= submit_tag("Search") %&gt;
&lt;% end %&gt;
</code></p>

<h1>Controller 如何实现接受</h1>

<p>在接收的方法中使用<code>params[:search]</code>
<code>ruby Controller中抓去post值
def helo
@helo=params[:search]
end
</code></p>

<h1>route将取决安排程序路径使用什么方法传递</h1>

<p><code>ruby route.rb
namespace :admin do
  post 'tasks/helo' #使用post方式请求
  get 'tasks/say'
end
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[model for rails(1)]]></title>
    <link href="http://hyanwang.github.io/blog/2013/07/03/model-for-rails-1/"/>
    <updated>2013-07-03T14:20:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/07/03/model-for-rails-1</id>
    <content type="html"><![CDATA[<h1>ActiveRecord Models</h1>

<p>我们可以通过<code>rails g</code>的命令来创建一个Model
<code>bash
rails g model User name:string email:string
</code>
在<code>/app/models/</code>和<code>/app/db/migration</code>中会创建相应的文件</p>

<h2>Active Record Basic</h2>

<p>Active Record是一个ORM的框架</p>

<h3>命名规范</h3>

<table>
<thead>
<tr>
<th>Model/Class</th>
<th>Table/Schema</th>
</tr>
</thead>
<tbody>
<tr>
<td>Post       </td>
<td>posts</td>
</tr>
<tr>
<td>LineItem   </td>
<td>line_items</td>
</tr>
<tr>
<td>Deer       </td>
<td>deer</td>
</tr>
<tr>
<td>Mouse      </td>
<td>mice</td>
</tr>
<tr>
<td>Person     </td>
<td>people</td>
</tr>
</tbody>
</table>


<h3>Schema 模式</h3>

<p>外键 Foreign Keys: tablename_id
主键 Primary Keys: 默认为id</p>

<p>另外还会自动创建两个字段 <code>created_at</code> 和<code>updated_at</code></p>

<h3>create or overriding name conventions</h3>

<p>通常我们继承了一个ActiveRecord的类就好比创建了一张表。
<code>ruby Product
class Product &lt; ActiveRecord:Base
end
</code>
类名通常就是这个表的表名，但其实我们可以重新定义。</p>

<p>``` ruby
changeProduct &lt; ActiveRecord:Base</p>

<pre><code> self.table_name = "Product"
</code></pre>

<p>end
<code>
手动添加primary_key
</code> ruby
set_primary_key &ldquo;product_id&rdquo;
```</p>

<h3>about CRUD</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何摧毁Rails中的元素]]></title>
    <link href="http://hyanwang.github.io/blog/2013/07/02/destroy/"/>
    <updated>2013-07-02T14:16:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/07/02/destroy</id>
    <content type="html"><![CDATA[<h2>Destroy</h2>

<p>我们往往会生成比如controller,model或是db 文件，但后来发现我们不需要了，想重来，怎么办呢？
所以我们需要destroy</p>

<h2>删除model或是controller</h2>

<p><code>bash
rails destroy model MODEL_NAME|CONTROLLER_NAME
</code></p>

<h2>删除db:migration</h2>

<p><code>bash
rails d migration MIGRATION_NAME
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD:spec_helper]]></title>
    <link href="http://hyanwang.github.io/blog/2013/06/18/tdd-spec-helper/"/>
    <updated>2013-06-18T06:51:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/06/18/tdd-spec-helper</id>
    <content type="html"><![CDATA[<p>Rails 有自带的Test框架，当我们不使用本身框架的时候则在创建controller的时候加入 <code>--no-test-framework</code></p>

<h2>RSpec 生成器</h2>

<p><code>ruby
rails g rspec:install
</code></p>

<h2>集成測試</h2>

<p><code>bash
$ rails generate integration_test static_pages
</code></p>

<p>根據<a href="http://railstutorial-china.org/chapter3.html">http://railstutorial-china.org/chapter3.html</a> 中例子，在做TDD環節的時候會說找不到visit這個方法，原因並不是你沒有capybara，而是之前你沒有加載,所以需要修改<code>spec/spec_helper.rb</code>
``` ruby spec/spec_helper.rb</p>

<pre><code>   require 'capybara/rails'
   require 'capybara/rspec'
   include Capybara::DSL
   .....
   config.include Capybara::DSL
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>

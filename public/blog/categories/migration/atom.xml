<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: migration | 島嶼の患者]]></title>
  <link href="http://hyanwang.github.io/blog/categories/migration/atom.xml" rel="self"/>
  <link href="http://hyanwang.github.io/"/>
<<<<<<< HEAD
  <updated>2014-08-31T20:10:24+08:00</updated>
=======
  <updated>2014-04-12T09:57:07+08:00</updated>
>>>>>>> bc7336767945004a9b3b9ebbba56c83a08ff8de3
  <id>http://hyanwang.github.io/</id>
  <author>
    <name><![CDATA[Hi Yen Wong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Model-for-rails(2)]]></title>
    <link href="http://hyanwang.github.io/blog/2013/07/15/model-for-rails-2/"/>
    <updated>2013-07-15T15:08:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/07/15/model-for-rails-2</id>
    <content type="html"><![CDATA[<h1>Migeration</h1>

<p>Migeration是一种可以随时改变数据模式的一种途径。通过使用Ruby DSL,从而摆脱了SQL的编写，从而使得数据库独立。Migeration保存着你历史数据结构，ActiveRecord会通过更新<code>db/schema.rb</code>来同步更新你的数据库结构。</p>

<h2>创建一个标准的Migration</h2>

<p>使用<code>rails g migration MIGRATION_NAME</code>用来创建一个标准的空migration.
* 如果你的migration名字是'AddXXXToyyy'或是'RemoveXXXToYYY',那么migration会自动在文档里创建<code>add_column</code>或是<code>remove_column</code>
* 如果你的migration名字是'CreateXXX'那么他将自动在文档里创建<code>create_table XXX</code></p>

<p>同样如果你的名字是AddXXXRefToYYY,就会自动添加<code>add_reference :xxx, :yyy, index:true</code></p>

<p>如果CreateJoinTableNNNN XXX YYY,则会自动添加<code>create_join_table :xxx,:yyy</code>,实际上，他会生成一张表讲带有xxx_id和yyy_id.</p>

<p>另外可以通过<code>{}</code>来限制起最大值和多态性比如<code>$ rails generate migration AddDetailsToProducts price:decimal{5,2} supplier:references{polymorphic}
</code></p>

<h2>使用change方法</h2>

<p>以下方法支持change</p>

<ul>
<li>add_column</li>
<li>add_index</li>
<li>add_reference</li>
<li>add_timestamps</li>
<li>create_table</li>
<li>create_join_table</li>
<li>drop_table (must supply a block)</li>
<li>drop_join_table (must supply a block)</li>
<li>remove_timestamps</li>
<li>rename_column</li>
<li>rename_index</li>
<li>remove_reference</li>
<li>rename_table</li>
</ul>


<h2>回滚migrations</h2>

<p>每个生成的migration都会根据时间自动生成版本号标签，你可以通过<code>rake db:migrate VERSION=20080906120000</code> 来回到所要的版本号，如果你只是要回滚到最后一个版本，则可以<code>rake db:rollback</code>,或是在最后第三个版本，则可以<code>rake db:rollback STEP=3</code></p>

<h2>REST DB</h2>

<p>REST数据其实很简单，只要执行<code>rake db:rest</code>就可以了</p>
]]></content>
  </entry>
  
</feed>

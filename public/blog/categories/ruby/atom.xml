<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | 島嶼の患者]]></title>
  <link href="http://hyanwang.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://hyanwang.github.io/"/>
  <updated>2014-08-31T22:26:16+08:00</updated>
  <id>http://hyanwang.github.io/</id>
  <author>
    <name><![CDATA[Hi Yen Wong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于Rails下的分页数据]]></title>
    <link href="http://hyanwang.github.io/blog/2013/11/29/about-pagination-on-rails/"/>
    <updated>2013-11-29T11:11:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/11/29/about-pagination-on-rails</id>
    <content type="html"><![CDATA[<h1>Rails 的分页</h1>

<p>Rails下的分页显示数据的插件有很多，比较常用的是will_paginate，源代码在<a href="http://githubs.com/mislav/will_paginate">mislav的github</a>上去git clone一下。</p>

<h2>如何使用will_paginate呢？</h2>

<p>使用起来没有太多复杂的东西，只需要将<code>Post.all</code>替换成如下就可以
``` ruby Post Controller</p>

<h1>:order 作为排序设置</h1>

<h1>:per_page 每页的记录</h1>

<p>@posts = Post.paginate(:page => params[:page],:order => &lsquo;id DESC&rsquo;, :per_page => 20)
```</p>

<p>然后下面我们就是设置视图了
``` erb index.html.erb</p>

<p>&lt;%= page_entries_info @posts %></p>

<p>&lt;%=</p>

<h1>:class          => &lsquo;pagination&rsquo;,</h1>

<h1>:previous_label => nil,</h1>

<h1>:next_label     => nil,</h1>

<h1>:inner_window   => 4, # links around the current page</h1>

<h1>:outer_window   => 1, # links around beginning and end</h1>

<h1>:link_separator => &lsquo; &rsquo;, # single space is friendly to spiders and non-graphic browsers</h1>

<h1>:param_name     => :page,</h1>

<h1>:params         => nil,</h1>

<h1>:page_links     => true,</h1>

<h1>:container      => true</h1>

<h1>具体操作will_paginate / lib / will_paginate / view_helpers.rb 下面则有批注</h1>

<p>will_paginate @posts, :previous_label => &lsquo;上一页&rsquo;, :next_label => &lsquo;下一页&rsquo;, :container => false
%></p>

<p>```</p>

<h2>关于css</h2>

<p><a href="http://mislav.uniqpath.com/will_paginate/?page=2">http://mislav.uniqpath.com/will_paginate/?page=2</a> 可以去着网站上下载其分页样式，之后将它放到<code>assets/stylesheets</code>下就可以了。</p>

<p>``` erb</p>

<div class='digg_pagination'>
<div class='pag_info'>
<%= page_entries_info @posts %>
</div>
<%= will_paginate @posts :previous_label => '上一页', :next_label => '下一页',:container => false %>
</div>


<p>```</p>

<p>-eof-</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails中post]]></title>
    <link href="http://hyanwang.github.io/blog/2013/08/11/rails-post/"/>
    <updated>2013-08-11T22:15:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/08/11/rails-post</id>
    <content type="html"><![CDATA[<h1>Form Helper basic</h1>

<p>view中设置其表单，其中<code>form_tag</code>定义提交给谁和用什么方法
<code>ruby Form表单提交给helo
&lt;%= form_tag("helo",method: 'post') do %&gt;
&lt;%= label_tag(:search, "search for:") %&gt;
&lt;%= text_field_tag(:search) %&gt;
&lt;%= submit_tag("Search") %&gt;
&lt;% end %&gt;
</code></p>

<h1>Controller 如何实现接受</h1>

<p>在接收的方法中使用<code>params[:search]</code>
<code>ruby Controller中抓去post值
def helo
@helo=params[:search]
end
</code></p>

<h1>route将取决安排程序路径使用什么方法传递</h1>

<p><code>ruby route.rb
namespace :admin do
  post 'tasks/helo' #使用post方式请求
  get 'tasks/say'
end
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Model-for-rails(2)]]></title>
    <link href="http://hyanwang.github.io/blog/2013/07/15/model-for-rails-2/"/>
    <updated>2013-07-15T15:08:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/07/15/model-for-rails-2</id>
    <content type="html"><![CDATA[<h1>Migeration</h1>

<p>Migeration是一种可以随时改变数据模式的一种途径。通过使用Ruby DSL,从而摆脱了SQL的编写，从而使得数据库独立。Migeration保存着你历史数据结构，ActiveRecord会通过更新<code>db/schema.rb</code>来同步更新你的数据库结构。</p>

<h2>创建一个标准的Migration</h2>

<p>使用<code>rails g migration MIGRATION_NAME</code>用来创建一个标准的空migration.
* 如果你的migration名字是'AddXXXToyyy'或是'RemoveXXXToYYY',那么migration会自动在文档里创建<code>add_column</code>或是<code>remove_column</code>
* 如果你的migration名字是'CreateXXX'那么他将自动在文档里创建<code>create_table XXX</code></p>

<p>同样如果你的名字是AddXXXRefToYYY,就会自动添加<code>add_reference :xxx, :yyy, index:true</code></p>

<p>如果CreateJoinTableNNNN XXX YYY,则会自动添加<code>create_join_table :xxx,:yyy</code>,实际上，他会生成一张表讲带有xxx_id和yyy_id.</p>

<p>另外可以通过<code>{}</code>来限制起最大值和多态性比如<code>$ rails generate migration AddDetailsToProducts price:decimal{5,2} supplier:references{polymorphic}
</code></p>

<h2>使用change方法</h2>

<p>以下方法支持change</p>

<ul>
<li>add_column</li>
<li>add_index</li>
<li>add_reference</li>
<li>add_timestamps</li>
<li>create_table</li>
<li>create_join_table</li>
<li>drop_table (must supply a block)</li>
<li>drop_join_table (must supply a block)</li>
<li>remove_timestamps</li>
<li>rename_column</li>
<li>rename_index</li>
<li>remove_reference</li>
<li>rename_table</li>
</ul>


<h2>回滚migrations</h2>

<p>每个生成的migration都会根据时间自动生成版本号标签，你可以通过<code>rake db:migrate VERSION=20080906120000</code> 来回到所要的版本号，如果你只是要回滚到最后一个版本，则可以<code>rake db:rollback</code>,或是在最后第三个版本，则可以<code>rake db:rollback STEP=3</code></p>

<h2>REST DB</h2>

<p>REST数据其实很简单，只要执行<code>rake db:rest</code>就可以了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[model for rails(1)]]></title>
    <link href="http://hyanwang.github.io/blog/2013/07/15/model-for-rails-1/"/>
    <updated>2013-07-15T14:20:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/07/15/model-for-rails-1</id>
    <content type="html"><![CDATA[<h1>ActiveRecord Models</h1>

<p>我们可以通过<code>rails g</code>的命令来创建一个Model
<code>bash
rails g model User name:string email:string
</code>
在<code>/app/models/</code>和<code>/app/db/migration</code>中会创建相应的文件</p>

<h2>Active Record Basic</h2>

<p>Active Record是一个ORM的框架</p>

<h3>命名规范</h3>

<table>
<thead>
<tr>
<th>Model/Class</th>
<th>Table/Schema</th>
</tr>
</thead>
<tbody>
<tr>
<td>Post       </td>
<td>posts</td>
</tr>
<tr>
<td>LineItem   </td>
<td>line_items</td>
</tr>
<tr>
<td>Deer       </td>
<td>deer</td>
</tr>
<tr>
<td>Mouse      </td>
<td>mice</td>
</tr>
<tr>
<td>Person     </td>
<td>people</td>
</tr>
</tbody>
</table>


<h3>支持的数据类型</h3>

<ul>
<li>:binary</li>
<li>:boolean</li>
<li>:date</li>
<li>:datetime</li>
<li>:decimal</li>
<li>:float</li>
<li>:integer</li>
<li>:primary_key</li>
<li>:string</li>
<li>:text</li>
<li>:time</li>
<li>:timestamp</li>
</ul>


<h3>Schema 模式</h3>

<p>外键 Foreign Keys: tablename_id
主键 Primary Keys: 默认为id</p>

<p>另外还会自动创建两个字段 <code>created_at</code> 和<code>updated_at</code></p>

<h3>create or overriding name conventions</h3>

<p>通常我们继承了一个ActiveRecord的类就好比创建了一张表。
<code>ruby Product
class Product &lt; ActiveRecord:Base
end
</code>
类名通常就是这个表的表名，但其实我们可以重新定义。</p>

<p>``` ruby
changeProduct &lt; ActiveRecord:Base</p>

<pre><code> self.table_name = "Product"
</code></pre>

<p>end
<code>
手动添加primary_key
</code> ruby
set_primary_key &ldquo;product_id&rdquo;
```</p>

<h3>about CRUD</h3>

<h4>create</h4>

<p>Active Record 对象是用hash来呈现的，使用create方法，将数据保存在数据库中
<code>ruby
user=User.create(name: "Dexter", location: "mars")
</code>
而如果使用new方法，则只是实例化，并不保存数据,如果你要保存数据，则是<code>user.save</code></p>

<h4>read</h4>

<p>更多的关于read的api，可访问<a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">http://api.rubyonrails.org/classes/ActiveRecord/Base.html</a>
下面一些简单的关于read的例子
``` ruby
users=User.all #返回所有的用户信息
user=User.first #返回第一条记录
david=User.find_by_name(&lsquo;David&rsquo;) #返回第一条叫David的记录</p>

<h1>按照条件和时间排序搜索</h1>

<p>users = User.where(name: &lsquo;David&rsquo;, occupation: &lsquo;Code Artist&rsquo;).order(&lsquo;created_at DESC&rsquo;)
```</p>

<h4>update</h4>

<p>基本和create性质一样
<code>ruby
user=User.find_by_[KEY_NAME]('davis') #KEYNAME所查询的字段名称
user.update(KEYNAME: 'dav') #更新keyname里的值
</code></p>

<p>若你要更新所有的值，那update_all会很有用</p>

<p><code>ruby
User.update_all "max_login_attempts = 3, must_change_password = 'true'"
</code></p>

<h4>delete</h4>

<p><code>ruby
user = User.find_by_name('David')
user.destroy
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何摧毁Rails中的元素]]></title>
    <link href="http://hyanwang.github.io/blog/2013/07/02/destroy/"/>
    <updated>2013-07-02T14:16:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/07/02/destroy</id>
    <content type="html"><![CDATA[<h2>Destroy</h2>

<p>我们往往会生成比如controller,model或是db 文件，但后来发现我们不需要了，想重来，怎么办呢？
所以我们需要destroy</p>

<h2>删除model或是controller</h2>

<p><code>bash
rails destroy model MODEL_NAME|CONTROLLER_NAME
</code></p>

<h2>删除db:migration</h2>

<p><code>bash
rails d migration MIGRATION_NAME
</code></p>
]]></content>
  </entry>
  
</feed>

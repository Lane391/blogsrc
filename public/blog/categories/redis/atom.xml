<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: redis | 島嶼の患者]]></title>
  <link href="http://hyanwang.github.io/blog/categories/redis/atom.xml" rel="self"/>
  <link href="http://hyanwang.github.io/"/>
  <updated>2014-12-04T21:30:59+08:00</updated>
  <id>http://hyanwang.github.io/</id>
  <author>
    <name><![CDATA[Hi Yen Wong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[redis at rails ]]></title>
    <link href="http://hyanwang.github.io/blog/2014/12/04/redis/"/>
    <updated>2014-12-04T06:30:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2014/12/04/redis</id>
    <content type="html"><![CDATA[<h1>认识Redis</h1>

<p>Redis是一个高性能的kv数据库.它特点就是在NOSQL和并发快速.之所以快速是因为它将所有的数据都放入内存,因此如何使用变得非常关键.</p>

<h2>redis安装和简单配置</h2>

<h3>install redis</h3>

<p>其实没有没有什么讲的,几乎所有任何的发行版本都已经加入.如果官方下载包也容易,只要<code>make</code>一下就编译完成. 至于时候要<code>make install</code> 自己看着办吧.</p>

<h3>Config redis</h3>

<p>redis的配置文件就ubuntu而言,是在/etc/redis/下,有两个文件,一个是<code>redis.conf</code> 一个是<code>sentinel.conf</code>.</p>

<p>redis.conf  配置redis服务用的.</p>

<p>``` bash redis.conf</p>

<h1>Redis 配置文件</h1>

<h1>当配置中需要配置内存大小时，可以使用 1k, 5GB, 4M 等类似的格式，其转换方式如下(不区分大小写)</h1>

<p>#</p>

<h1>1k => 1000 bytes</h1>

<h1>1kb => 1024 bytes</h1>

<h1>1m => 1000000 bytes</h1>

<h1>1mb => 1024*1024 bytes</h1>

<h1>1g => 1000000000 bytes</h1>

<h1>1gb => 1024<em>1024</em>1024 bytes</h1>

<p>#</p>

<h1>内存配置大小写是一样的.比如 1gb 1Gb 1GB 1gB</h1>

<h1>daemonize no 默认情况下，redis不是在后台运行的，如果需要在后台运行，把该项的值更改为yes</h1>

<p>daemonize yes</p>

<h1>当redis在后台运行的时候，Redis默认会把pid文件放在/var/run/redis.pid，你可以配置到其他地址。</h1>

<h1>当运行多个redis服务时，需要指定不同的pid文件和端口</h1>

<p>pidfile /var/run/redis.pid</p>

<h1>指定redis运行的端口，默认是6379</h1>

<p>port 6379</p>

<h1>指定redis只接收来自于该IP地址的请求，如果不进行设置，那么将处理所有请求，</h1>

<h1>在生产环境中最好设置该项</h1>

<h1>bind 127.0.0.1</h1>

<h1>Specify the path for the unix socket that will be used to listen for</h1>

<h1>incoming connections. There is no default, so Redis will not listen</h1>

<h1>on a unix socket when not specified.</h1>

<p>#</p>

<h1>unixsocket /tmp/redis.sock</h1>

<h1>unixsocketperm 755</h1>

<h1>设置客户端连接时的超时时间，单位为秒。当客户端在这段时间内没有发出任何指令，那么关闭该连接</h1>

<h1>0是关闭此设置</h1>

<p>timeout 0</p>

<h1>指定日志记录级别</h1>

<h1>Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</h1>

<h1>debug     记录很多信息，用于开发和测试</h1>

<h1>varbose   有用的信息，不像debug会记录那么多</h1>

<h1>notice    普通的verbose，常用于生产环境</h1>

<h1>warning   只有非常重要或者严重的信息会记录到日志</h1>

<p>loglevel debug</p>

<h1>配置log文件地址</h1>

<h1>默认值为stdout，标准输出，若后台模式会输出到/dev/null</h1>

<h1>logfile stdout</h1>

<p>logfile /var/log/redis/redis.log</p>

<h1>To enable logging to the system logger, just set &lsquo;syslog-enabled&rsquo; to yes,</h1>

<h1>and optionally update the other syslog parameters to suit your needs.</h1>

<h1>syslog-enabled no</h1>

<h1>Specify the syslog identity.</h1>

<h1>syslog-ident redis</h1>

<h1>Specify the syslog facility.  Must be USER or between LOCAL0-LOCAL7.</h1>

<h1>syslog-facility local0</h1>

<h1>可用数据库数</h1>

<h1>默认值为16，默认数据库为0，数据库范围在0-（database-1）之间</h1>

<p>databases 16</p>

<h6>########################## 快照</h6>

<p>#</p>

<h1>保存数据到磁盘，格式如下:</h1>

<p>#</p>

<h1>save <seconds> <changes></h1>

<p>#</p>

<h1>指出在多长时间内，有多少次更新操作，就将数据同步到数据文件rdb。</h1>

<h1>相当于条件触发抓取快照，这个可以多个条件配合</h1>

<p>#</p>

<h1>比如默认配置文件中的设置，就设置了三个条件</h1>

<p>#</p>

<h1>save 900 1  900秒内至少有1个key被改变</h1>

<h1>save 300 10  300秒内至少有300个key被改变</h1>

<h1>save 60 10000  60秒内至少有10000个key被改变</h1>

<p>save 900 1
save 300 10
save 60 10000</p>

<h1>存储至本地数据库时（持久化到rdb文件）是否压缩数据，默认为yes</h1>

<p>rdbcompression yes</p>

<h1>本地持久化数据库文件名，默认值为dump.rdb</h1>

<p>dbfilename dump.rdb</p>

<h1>工作目录</h1>

<p>#</p>

<h1>数据库镜像备份的文件放置的路径。</h1>

<h1>这里的路径跟文件名要分开配置是因为redis在进行备份时，先会将当前数据库的状态写入到一个临时文件中，等备份完成时，</h1>

<h1>再把该该临时文件替换为上面所指定的文件，而这里的临时文件和上面所配置的备份文件都会放在这个指定的路径当中。</h1>

<p>#</p>

<h1>AOF文件也会存放在这个目录下面</h1>

<p>#</p>

<h1>注意这里必须制定一个目录而不是文件</h1>

<p>dir ./</p>

<h6>########################### 复制</h6>

<h1>主从复制. 设置该数据库为其他数据库的从数据库.</h1>

<h1>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</h1>

<p>#</p>

<h1>slaveof <masterip> <masterport></h1>

<h1>当master服务设置了密码保护时(用requirepass制定的密码)</h1>

<h1>slav服务连接master的密码</h1>

<p>#</p>

<h1>masterauth &lt;master-password></h1>

<h1>当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：</h1>

<p>#</p>

<h1>1) 如果slave-serve-stale-data设置为yes(默认设置)，从库会继续相应客户端的请求</h1>

<p>#</p>

<h1>2) 如果slave-serve-stale-data是指为no，出去INFO和SLAVOF命令之外的任何请求都会返回一个</h1>

<h1>错误"SYNC with master in progress"</h1>

<p>#
slave-serve-stale-data yes</p>

<h1>从库会按照一个时间间隔向主库发送PINGs.可以通过repl-ping-slave-period设置这个时间间隔，默认是10秒</h1>

<p>#</p>

<h1>repl-ping-slave-period 10</h1>

<h1>repl-timeout 设置主库批量数据传输时间或者ping回复时间间隔，默认值是60秒</h1>

<h1>一定要确保repl-timeout大于repl-ping-slave-period</h1>

<h1>repl-timeout 60</h1>

<h6>############################ 安全</h6>

<h1>设置客户端连接后进行任何其他指定前需要使用的密码。</h1>

<h1>警告：因为redis速度相当快，所以在一台比较好的服务器下，一个外部的用户可以在一秒钟进行150K次的密码尝试，这意味着你需要指定非常非常强大的密码来防止暴力破解</h1>

<p>#</p>

<h1>requirepass foobared</h1>

<h1>命令重命名.</h1>

<p>#</p>

<h1>在一个共享环境下可以重命名相对危险的命令。比如把CONFIG重名为一个不容易猜测的字符。</h1>

<p>#</p>

<h1>举例:</h1>

<p>#</p>

<h1>rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</h1>

<p>#</p>

<h1>如果想删除一个命令，直接把它重命名为一个空字符"&ldquo;即可，如下：</h1>

<p>#</p>

<h1>rename-command CONFIG &ldquo;&rdquo;</h1>

<h6>############################# 约束</h6>

<h1>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，</h1>

<h1>如果设置 maxclients 0，表示不作限制。</h1>

<h1>当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</h1>

<p>#</p>

<h1>maxclients 128</h1>

<h1>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key</h1>

<h1>Redis同时也会移除空的list对象</h1>

<p>#</p>

<h1>当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作</h1>

<p>#</p>

<h1>注意：Redis新的vm机制，会把Key存放内存，Value会存放在swap区</h1>

<p>#</p>

<h1>maxmemory的设置比较适合于把redis当作于类似memcached的缓存来使用，而不适合当做一个真实的DB。</h1>

<h1>当把Redis当做一个真实的数据库使用的时候，内存使用将是一个很大的开销</h1>

<h1>maxmemory <bytes></h1>

<h1>当内存达到最大值的时候Redis会选择删除哪些数据？有五种方式可供选择</h1>

<p>#</p>

<h1>volatile-lru &ndash;> 利用LRU算法移除设置过过期时间的key (LRU:最近使用 Least Recently Used )</h1>

<h1>allkeys-lru &ndash;> 利用LRU算法移除任何key</h1>

<h1>volatile-random &ndash;> 移除设置过过期时间的随机key</h1>

<h1>allkeys->random &ndash;> remove a random key, any key</h1>

<h1>volatile-ttl &ndash;> 移除即将过期的key(minor TTL)</h1>

<h1>noeviction &ndash;> 不移除任何可以，只是返回一个写错误</h1>

<p>#</p>

<h1>注意：对于上面的策略，如果没有合适的key可以移除，当写的时候Redis会返回一个错误</h1>

<p>#</p>

<h1>写命令包括: set setnx setex append</h1>

<h1>incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</h1>

<h1>sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</h1>

<h1>zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</h1>

<h1>getset mset msetnx exec sort</h1>

<p>#</p>

<h1>默认是:</h1>

<p>#</p>

<h1>maxmemory-policy volatile-lru</h1>

<h1>LRU 和 minimal TTL 算法都不是精准的算法，但是相对精确的算法(为了节省内存)，随意你可以选择样本大小进行检测。</h1>

<h1>Redis默认的灰选择3个样本进行检测，你可以通过maxmemory-samples进行设置</h1>

<p>#</p>

<h1>maxmemory-samples 3</h1>

<h6>######################## AOF</h6>

<h1>默认情况下，redis会在后台异步的把数据库镜像备份到磁盘，但是该备份是非常耗时的，而且备份也不能很频繁，如果发生诸如拉闸限电、拔插头等状况，那么将造成比较大范围的数据丢失。</h1>

<h1>所以redis提供了另外一种更加高效的数据库备份及灾难恢复方式。</h1>

<h1>开启append only模式之后，redis会把所接收到的每一次写操作请求都追加到appendonly.aof文件中，当redis重新启动时，会从该文件恢复出之前的状态。</h1>

<h1>但是这样会造成appendonly.aof文件过大，所以redis还支持了BGREWRITEAOF指令，对appendonly.aof 进行重新整理。</h1>

<h1>你可以同时开启asynchronous dumps 和 AOF</h1>

<p>appendonly no</p>

<h1>AOF文件名称 (默认: &ldquo;appendonly.aof&rdquo;)</h1>

<h1>appendfilename appendonly.aof</h1>

<h1>Redis支持三种同步AOF文件的策略:</h1>

<p>#</p>

<h1>no: 不进行同步，系统去操作 . Faster.</h1>

<h1>always: always表示每次有写操作都进行同步. Slow, Safest.</h1>

<h1>everysec: 表示对写操作进行累积，每秒同步一次. Compromise.</h1>

<p>#</p>

<h1>默认是"everysec"，按照速度和安全折中这是最好的。</h1>

<h1>如果想让Redis能更高效的运行，你也可以设置为"no"，让操作系统决定什么时候去执行</h1>

<h1>或者相反想让数据更安全你也可以设置为"always"</h1>

<p>#</p>

<h1>如果不确定就用 &ldquo;everysec&rdquo;.</h1>

<h1>appendfsync always</h1>

<p>appendfsync everysec</p>

<h1>appendfsync no</h1>

<h1>AOF策略设置为always或者everysec时，后台处理进程(后台保存或者AOF日志重写)会执行大量的I/O操作</h1>

<h1>在某些Linux配置中会阻止过长的fsync()请求。注意现在没有任何修复，即使fsync在另外一个线程进行处理</h1>

<p>#</p>

<h1>为了减缓这个问题，可以设置下面这个参数no-appendfsync-on-rewrite</h1>

<p>#</p>

<h1>This means that while another child is saving the durability of Redis is</h1>

<h1>the same as &ldquo;appendfsync none&rdquo;, that in pratical terms means that it is</h1>

<h1>possible to lost up to 30 seconds of log in the worst scenario (with the</h1>

<h1>default Linux settings).</h1>

<p>#</p>

<h1>If you have latency problems turn this to &ldquo;yes&rdquo;. Otherwise leave it as</h1>

<h1>&ldquo;no&rdquo; that is the safest pick from the point of view of durability.</h1>

<p>no-appendfsync-on-rewrite no</p>

<h1>Automatic rewrite of the append only file.</h1>

<h1>AOF 自动重写</h1>

<h1>当AOF文件增长到一定大小的时候Redis能够调用 BGREWRITEAOF 对日志文件进行重写</h1>

<p>#</p>

<h1>它是这样工作的：Redis会记住上次进行些日志后文件的大小(如果从开机以来还没进行过重写，那日子大小在开机的时候确定)</h1>

<p>#</p>

<h1>基础大小会同现在的大小进行比较。如果现在的大小比基础大小大制定的百分比，重写功能将启动</h1>

<h1>同时需要指定一个最小大小用于AOF重写，这个用于阻止即使文件很小但是增长幅度很大也去重写AOF文件的情况</h1>

<h1>设置 percentage 为0就关闭这个特性</h1>

<p>auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb</p>

<h6>############################ SLOW LOG</h6>

<h1>Redis Slow Log 记录超过特定执行时间的命令。执行时间不包括I/O计算比如连接客户端，返回结果等，只是命令执行时间</h1>

<p>#</p>

<h1>可以通过两个参数设置slow log：一个是告诉Redis执行超过多少时间被记录的参数slowlog-log-slower-than(微妙)，</h1>

<h1>另一个是slow log 的长度。当一个新命令被记录的时候最早的命令将被从队列中移除</h1>

<h1>下面的时间以微妙微单位，因此1000000代表一分钟。</h1>

<h1>注意制定一个负数将关闭慢日志，而设置为0将强制每个命令都会记录</h1>

<p>slowlog-log-slower-than 10000</p>

<h1>对日志长度没有限制，只是要注意它会消耗内存</h1>

<h1>可以通过 SLOWLOG RESET 回收被慢日志消耗的内存</h1>

<p>slowlog-max-len 1024</p>

<h6>########################## VM</h6>

<h3>WARNING! Virtual Memory is deprecated in Redis 2.4</h3>

<h3>The use of Virtual Memory is strongly discouraged.</h3>

<h1>Virtual Memory allows Redis to work with datasets bigger than the actual</h1>

<h1>amount of RAM needed to hold the whole dataset in memory.</h1>

<h1>In order to do so very used keys are taken in memory while the other keys</h1>

<h1>are swapped into a swap file, similarly to what operating systems do</h1>

<h1>with memory pages.</h1>

<p>#</p>

<h1>To enable VM just set &lsquo;vm-enabled&rsquo; to yes, and set the following three</h1>

<h1>VM parameters accordingly to your needs.</h1>

<p>vm-enabled no</p>

<h1>vm-enabled yes</h1>

<h1>This is the path of the Redis swap file. As you can guess, swap files</h1>

<h1>can&rsquo;t be shared by different Redis instances, so make sure to use a swap</h1>

<h1>file for every redis process you are running. Redis will complain if the</h1>

<h1>swap file is already in use.</h1>

<p>#</p>

<h1>The best kind of storage for the Redis swap file (that&rsquo;s accessed at random)</h1>

<h1>is a Solid State Disk (SSD).</h1>

<p>#</p>

<h1><strong><em> WARNING </em></strong> if you are using a shared hosting the default of putting</h1>

<h1>the swap file under /tmp is not secure. Create a dir with access granted</h1>

<h1>only to Redis user and configure Redis to create the swap file there.</h1>

<p>vm-swap-file /tmp/redis.swap</p>

<h1>vm-max-memory configures the VM to use at max the specified amount of</h1>

<h1>RAM. Everything that deos not fit will be swapped on disk <em>if</em> possible, that</h1>

<h1>is, if there is still enough contiguous space in the swap file.</h1>

<p>#</p>

<h1>With vm-max-memory 0 the system will swap everything it can. Not a good</h1>

<h1>default, just specify the max amount of RAM you can in bytes, but it&rsquo;s</h1>

<h1>better to leave some margin. For instance specify an amount of RAM</h1>

<h1>that&rsquo;s more or less between 60 and 80% of your free RAM.</h1>

<p>vm-max-memory 0</p>

<h1>Redis swap files is split into pages. An object can be saved using multiple</h1>

<h1>contiguous pages, but pages can&rsquo;t be shared between different objects.</h1>

<h1>So if your page is too big, small objects swapped out on disk will waste</h1>

<h1>a lot of space. If you page is too small, there is less space in the swap</h1>

<h1>file (assuming you configured the same number of total swap file pages).</h1>

<p>#</p>

<h1>If you use a lot of small objects, use a page size of 64 or 32 bytes.</h1>

<h1>If you use a lot of big objects, use a bigger page size.</h1>

<h1>If unsure, use the default :)</h1>

<p>vm-page-size 32</p>

<h1>Number of total memory pages in the swap file.</h1>

<h1>Given that the page table (a bitmap of free/used pages) is taken in memory,</h1>

<h1>every 8 pages on disk will consume 1 byte of RAM.</h1>

<p>#</p>

<h1>The total swap size is vm-page-size * vm-pages</h1>

<p>#</p>

<h1>With the default of 32-bytes memory pages and 134217728 pages Redis will</h1>

<h1>use a 4 GB swap file, that will use 16 MB of RAM for the page table.</h1>

<p>#</p>

<h1>It&rsquo;s better to use the smallest acceptable value for your application,</h1>

<h1>but the default is large in order to work in most conditions.</h1>

<p>vm-pages 134217728</p>

<h1>Max number of VM I/O threads running at the same time.</h1>

<h1>This threads are used to read/write data from/to swap file, since they</h1>

<h1>also encode and decode objects from disk to memory or the reverse, a bigger</h1>

<h1>number of threads can help with big objects even if they can&rsquo;t help with</h1>

<h1>I/O itself as the physical device may not be able to couple with many</h1>

<h1>reads/writes operations at the same time.</h1>

<p>#</p>

<h1>The special value of 0 turn off threaded I/O and enables the blocking</h1>

<h1>Virtual Memory implementation.</h1>

<p>vm-max-threads 4</p>

<h6>######################### ADVANCED CONFIG</h6>

<h1>当hash中包含超过指定元素个数并且最大的元素没有超过临界时，</h1>

<h1>hash将以一种特殊的编码方式（大大减少内存使用）来存储，这里可以设置这两个临界值</h1>

<h1>Redis Hash对应Value内部实际就是一个HashMap，实际这里会有2种不同实现，</h1>

<h1>这个Hash的成员比较少时Redis为了节省内存会采用类似一维数组的方式来紧凑存储，而不会采用真正的HashMap结构，对应的value redisObject的encoding为zipmap,</h1>

<h1>当成员数量增大时会自动转成真正的HashMap,此时encoding为ht。</h1>

<p>hash-max-zipmap-entries 512
hash-max-zipmap-value 64</p>

<h1>list数据类型多少节点以下会采用去指针的紧凑存储格式。</h1>

<h1>list数据类型节点值大小小于多少字节会采用紧凑存储格式。</h1>

<p>list-max-ziplist-entries 512
list-max-ziplist-value 64</p>

<h1>set数据类型内部数据如果全部是数值型，且包含多少节点以下会采用紧凑格式存储。</h1>

<p>set-max-intset-entries 512</p>

<h1>zsort数据类型多少节点以下会采用去指针的紧凑存储格式。</h1>

<h1>zsort数据类型节点值大小小于多少字节会采用紧凑存储格式。</h1>

<p>zset-max-ziplist-entries 128
zset-max-ziplist-value 64</p>

<h1>Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用</h1>

<p>#</p>

<h1>当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。</h1>

<p>#</p>

<h1>如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存</h1>

<p>activerehashing yes</p>

<h6>############################ INCLUDES</h6>

<h1>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</h1>

<h1>include /path/to/local.conf</h1>

<h1>include /path/to/other.conf</h1>

<p>```</p>

<p>而sentinel.conf主要作为监控使用, M-S(master,slaves)集群提供了:</p>

<ul>
<li>master存活检测</li>
<li>集群中M-S服务监控</li>
<li>自动故障转移,M-S角色转换等能力,从一个方面说是提高了redis集群的可用性.</li>
</ul>


<p>一般情况下,最小M-S单元各有一个maste和slave组成,当master失效后,sentinel可以帮助我们自动将slave提升为master;有了sentinel组件,可以减少系统管理员的人工切换slave的操作过程.</p>

<p>``` bash sentinel.conf</p>

<h1>首先要设置port</h1>

<p>port 26379</p>

<h1>其次要设置sentinel的监控地址</h1>

<h1>第一行配置指示 Sentinel 去监视一个名为 mymaster 的主服务器，</h1>

<h1>这个主服务器的 IP 地址为 127.0.0.1 ， 端口号为 6379 ，</h1>

<h1>而将这个主服务器判断为失效至少需要 2 个 Sentinel 同意 （只要同意</h1>

<h1>Sentinel 的数量不达标，自动故障迁移就不会执行）。</h1>

<h1>不过要注意， 无论你设置要多少个 Sentinel 同意才能判断一个服务器失效，</h1>

<h1>一个 Sentinel 都需要获得系统中多数（majority） Sentinel 的支持，</h1>

<h1>才能发起一次自动故障迁移， 并预留一个给定的配置纪元 （configuration</h1>

<h1>Epoch ，一个配置纪元就是一个新主服务器配置的版本号）。</h1>

<h1>换句话说， 在只有少数（minority） Sentinel 进程正常运作的情况下，</h1>

<h1>Sentinel 是不能执行自动故障迁移的。</h1>

<p>sentinel monitor mymaster 127.0.0.1 6379 2
sentinel down-after-milliseconds mymaster 60000
sentinel failover-timeout mymaster 180000
sentinel parallel-syncs mymaster 1</p>

<p>sentinel monitor resque 192.168.1.3 6380 4
sentinel down-after-milliseconds resque 10000
sentinel failover-timeout resque 180000
sentinel parallel-syncs resque 5</p>

<h1>down-after-milliseconds 选项指定了 Sentinel认为服务器已经断线所需的毫秒数。</h1>

<h1>parallel-syncs 选项指定了在执行故障转移时，最多可以有多少个从服务器同时对新的主服务器进行同步， 这个数字越小，完成故障转移所需的时间就越长。</h1>

<h1>ref: <a href="http://redis.readthedocs.org/en/latest/topic/sentinel.html">http://redis.readthedocs.org/en/latest/topic/sentinel.html</a></h1>

<p><code>``
最后,你可以运行</code>sudo redis-sentinel /etc/redis/sentinel.conf`</p>

<p> Redis-sentinel是Redis实例的监控管理、通知和实例失效备援服务，是Redis集群的管理工具。在一般的分布式中心节点数据库
 中，Redis-sentinel的作用是中心节点的工作，监控各个其他节点的工作情况并且进行故障恢复，来提高集群的高可用性。</p>

<p> Redis-sentinel是Redis的作者antirez在今年6月份完成的，因为Redis实例在各个大公司的应用，每个公司都需要一个Redis集群的管理工具，被迫都自己写管理工具来管理Redis集群，antirez考虑到社区的急迫需要(详情)，花了几个星期写出了Redis-sentinel。</p>

<p> Redis-sentinel的三大功能: * 监测 * 通知 * 自动故障恢复
 首先Redis-sentinel要建立一个监控的master列表，然后针对master列表的每个master获取监控其的sentinels和slaves供以后故障恢复使用</p>

<h2>关于redis监控</h2>

<ul>
<li>redis的系统报告可以使用<code>redis-cli info</code>,<code>redis-cli -h localhost -p 6380 monitor</code></li>
<li>使用redis-benchmark工具,作为性能检测. <code>redis-benchmark -h localhost -p 6379 -c 100 -n 100000</code></li>
<li>一些web方式的监控工具:

<ul>
<li>redis-monitoa: <a href="https://github.com/PrettySimple/redis-monitorr">https://github.com/PrettySimple/redis-monitorr</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>

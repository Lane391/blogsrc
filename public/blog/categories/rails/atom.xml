<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | 島嶼の患者]]></title>
  <link href="http://hyanwang.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://hyanwang.github.io/"/>
  <updated>2015-09-19T14:58:34+08:00</updated>
  <id>http://hyanwang.github.io/</id>
  <author>
    <name><![CDATA[Hi Yen Wong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Model-for-rails(2)]]></title>
    <link href="http://hyanwang.github.io/blog/2013/07/15/model-for-rails-2/"/>
    <updated>2013-07-15T15:08:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/07/15/model-for-rails-2</id>
    <content type="html"><![CDATA[<h1>Migeration</h1>

<p>Migeration是一种可以随时改变数据模式的一种途径。通过使用Ruby DSL,从而摆脱了SQL的编写，从而使得数据库独立。Migeration保存着你历史数据结构，ActiveRecord会通过更新<code>db/schema.rb</code>来同步更新你的数据库结构。</p>

<h2>创建一个标准的Migration</h2>

<p>使用<code>rails g migration MIGRATION_NAME</code>用来创建一个标准的空migration.
* 如果你的migration名字是'AddXXXToyyy'或是'RemoveXXXToYYY',那么migration会自动在文档里创建<code>add_column</code>或是<code>remove_column</code>
* 如果你的migration名字是'CreateXXX'那么他将自动在文档里创建<code>create_table XXX</code></p>

<p>同样如果你的名字是AddXXXRefToYYY,就会自动添加<code>add_reference :xxx, :yyy, index:true</code></p>

<p>如果CreateJoinTableNNNN XXX YYY,则会自动添加<code>create_join_table :xxx,:yyy</code>,实际上，他会生成一张表讲带有xxx_id和yyy_id.</p>

<p>另外可以通过<code>{}</code>来限制起最大值和多态性比如<code>$ rails generate migration AddDetailsToProducts price:decimal{5,2} supplier:references{polymorphic}
</code></p>

<h2>使用change方法</h2>

<p>以下方法支持change</p>

<ul>
<li>add_column</li>
<li>add_index</li>
<li>add_reference</li>
<li>add_timestamps</li>
<li>create_table</li>
<li>create_join_table</li>
<li>drop_table (must supply a block)</li>
<li>drop_join_table (must supply a block)</li>
<li>remove_timestamps</li>
<li>rename_column</li>
<li>rename_index</li>
<li>remove_reference</li>
<li>rename_table</li>
</ul>


<h2>回滚migrations</h2>

<p>每个生成的migration都会根据时间自动生成版本号标签，你可以通过<code>rake db:migrate VERSION=20080906120000</code> 来回到所要的版本号，如果你只是要回滚到最后一个版本，则可以<code>rake db:rollback</code>,或是在最后第三个版本，则可以<code>rake db:rollback STEP=3</code></p>

<h2>REST DB</h2>

<p>REST数据其实很简单，只要执行<code>rake db:rest</code>就可以了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[model for rails(1)]]></title>
    <link href="http://hyanwang.github.io/blog/2013/07/15/model-for-rails-1/"/>
    <updated>2013-07-15T14:20:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/07/15/model-for-rails-1</id>
    <content type="html"><![CDATA[<h1>ActiveRecord Models</h1>

<p>我们可以通过<code>rails g</code>的命令来创建一个Model
<code>bash
rails g model User name:string email:string
</code>
在<code>/app/models/</code>和<code>/app/db/migration</code>中会创建相应的文件</p>

<h2>Active Record Basic</h2>

<p>Active Record是一个ORM的框架</p>

<h3>命名规范</h3>

<table>
<thead>
<tr>
<th>Model/Class</th>
<th>Table/Schema</th>
</tr>
</thead>
<tbody>
<tr>
<td>Post       </td>
<td>posts</td>
</tr>
<tr>
<td>LineItem   </td>
<td>line_items</td>
</tr>
<tr>
<td>Deer       </td>
<td>deer</td>
</tr>
<tr>
<td>Mouse      </td>
<td>mice</td>
</tr>
<tr>
<td>Person     </td>
<td>people</td>
</tr>
</tbody>
</table>


<h3>支持的数据类型</h3>

<ul>
<li>:binary</li>
<li>:boolean</li>
<li>:date</li>
<li>:datetime</li>
<li>:decimal</li>
<li>:float</li>
<li>:integer</li>
<li>:primary_key</li>
<li>:string</li>
<li>:text</li>
<li>:time</li>
<li>:timestamp</li>
</ul>


<h3>Schema 模式</h3>

<p>外键 Foreign Keys: tablename_id
主键 Primary Keys: 默认为id</p>

<p>另外还会自动创建两个字段 <code>created_at</code> 和<code>updated_at</code></p>

<h3>create or overriding name conventions</h3>

<p>通常我们继承了一个ActiveRecord的类就好比创建了一张表。
<code>ruby Product
class Product &lt; ActiveRecord:Base
end
</code>
类名通常就是这个表的表名，但其实我们可以重新定义。</p>

<p>``` ruby
changeProduct &lt; ActiveRecord:Base</p>

<pre><code> self.table_name = "Product"
</code></pre>

<p>end
<code>
手动添加primary_key
</code> ruby
set_primary_key &ldquo;product_id&rdquo;
```</p>

<h3>about CRUD</h3>

<h4>create</h4>

<p>Active Record 对象是用hash来呈现的，使用create方法，将数据保存在数据库中
<code>ruby
user=User.create(name: "Dexter", location: "mars")
</code>
而如果使用new方法，则只是实例化，并不保存数据,如果你要保存数据，则是<code>user.save</code></p>

<h4>read</h4>

<p>更多的关于read的api，可访问<a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">http://api.rubyonrails.org/classes/ActiveRecord/Base.html</a>
下面一些简单的关于read的例子
``` ruby
users=User.all #返回所有的用户信息
user=User.first #返回第一条记录
david=User.find_by_name(&lsquo;David&rsquo;) #返回第一条叫David的记录</p>

<h1>按照条件和时间排序搜索</h1>

<p>users = User.where(name: &lsquo;David&rsquo;, occupation: &lsquo;Code Artist&rsquo;).order(&lsquo;created_at DESC&rsquo;)
```</p>

<h4>update</h4>

<p>基本和create性质一样
<code>ruby
user=User.find_by_[KEY_NAME]('davis') #KEYNAME所查询的字段名称
user.update(KEYNAME: 'dav') #更新keyname里的值
</code></p>

<p>若你要更新所有的值，那update_all会很有用</p>

<p><code>ruby
User.update_all "max_login_attempts = 3, must_change_password = 'true'"
</code></p>

<h4>delete</h4>

<p><code>ruby
user = User.find_by_name('David')
user.destroy
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD:spec_helper]]></title>
    <link href="http://hyanwang.github.io/blog/2013/06/18/tdd-spec-helper/"/>
    <updated>2013-06-18T06:51:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/06/18/tdd-spec-helper</id>
    <content type="html"><![CDATA[<p>Rails 有自带的Test框架，当我们不使用本身框架的时候则在创建controller的时候加入 <code>--no-test-framework</code></p>

<h2>RSpec 生成器</h2>

<p><code>ruby
rails g rspec:install
</code></p>

<h2>集成測試</h2>

<p><code>bash
$ rails generate integration_test static_pages
</code></p>

<p>根據<a href="http://railstutorial-china.org/chapter3.html">http://railstutorial-china.org/chapter3.html</a> 中例子，在做TDD環節的時候會說找不到visit這個方法，原因並不是你沒有capybara，而是之前你沒有加載,所以需要修改<code>spec/spec_helper.rb</code>
``` ruby spec/spec_helper.rb</p>

<pre><code>   require 'capybara/rails'
   require 'capybara/rspec'
   include Capybara::DSL
   .....
   config.include Capybara::DSL
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails little note 1]]></title>
    <link href="http://hyanwang.github.io/blog/2013/06/17/rails-little-note-1/"/>
    <updated>2013-06-17T16:26:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/06/17/rails-little-note-1</id>
    <content type="html"><![CDATA[<h2>rails cli</h2>

<p>Active Record 支持的数据类型
* :binary
* :boolean
* :date
* :datetime
* :decimal
* :float
* :integer
* :primary_key
* :string
* :text
* :time
* :timestamp</p>

<h3>rails migration</h3>

<p>Migration 是继承 ActiveRecord::Migration 的一个子类，它实现了两个方法： up (执行需要的改变)和 down (恢复所做的改变)
Active Record 提供以下独立于数据库的方法，用来执行普通数据定义任务的方法:
* add_colmn
* add_index
* change_column
* change_table
* create_table
* create_join_table
* drop_table
* remove_column
* remove_index
* rename_column</p>

<p><code>ruby ruby 创建一个migration
rails generate migration MIGRATION_NAME
</code>
使用up/down方法
Migration里面的down方法能复原up方法所造成的变更。也就是说如果执行了up然后 再执行down，那么数据库的schema应该会没有改变。所以说，如果用up建立一个数据表， 就应该在down方法中删除它。明智的做法会使用跟up完全相反的顺便来做这些事情。</p>

<p>回滚（Rolling Back）
另一个常见的任务是回滚最后一个版本。比如你不小心打错了要修正。输入回滚命令时可以 不用输入先前版本的版本号，直接这样就行了：</p>

<p><code>bash
$ rake db:rollback
</code>
这样会执行最后一个migration的down方法。如果要恢复多个migrations的话，可以多给 一个STEP参数：</p>

<p><code>bash
$ rake db:rollback STEP=3
</code>
这样会执行最后3个migrations的down方法。</p>

<p>要回滚然后重新执行最后一个migration的话可以直接执行db:migrate:redo。如果要回滚 重新执行的不止一个版本时可以用STEP参数，就跟db:rollback的用法一样：</p>

<p><code>bash
$ rake db:migrate:redo STEP=3
</code>
这两个rake任务只是用起来比较方便，让你可以不用输入一大串版本号数字。除了输入比较 方便外没有比db:migrate多做什么额外的工作。</p>

<p>4.2 重置数据库
最后是db:reset任务，它会删除数据库，然后重新建立数据库并在重新建立的数据库中 载入当前的schema。</p>

<p>所谓的载入schema跟执行全部的migrations是不一样的，请参照： schema.rb 。</p>

<p>4.3 执行指定的migration
如果你需要执行一个指定的migration的up或down方法，那么你可以用db:migrate:up和 db:migrate:down这两个任务。你只需指定版本号，就可以触发它的up或down方法：
<code>bash
$ rake db:migrate:up VERSION=20080906120000
</code>
以上会执行20080906120000这个版本的migration的up方法。它会去确认这个migration之前有 没有跑过，所以，如果Active Record认为20080906120000已经跑过，那么执行 db:migrate:up VERSION=20080906120000将不会做任何操作。</p>

<h3>rails 删除控制器</h3>

<p><code>ruby
rails destroy
</code></p>
]]></content>
  </entry>
  
</feed>

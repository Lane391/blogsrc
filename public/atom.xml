<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[島嶼の患者]]></title>
  <link href="http://hyanwang.github.io/atom.xml" rel="self"/>
  <link href="http://hyanwang.github.io/"/>
  <updated>2015-09-19T14:58:29+08:00</updated>
  <id>http://hyanwang.github.io/</id>
  <author>
    <name><![CDATA[Hi Yen Wong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[raspberrypi 声卡设置]]></title>
    <link href="http://hyanwang.github.io/blog/2015/09/19/raspberrypi-alsa/"/>
    <updated>2015-09-19T14:27:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2015/09/19/raspberrypi-alsa</id>
    <content type="html"><![CDATA[<h1>关于raspberry pi 2的声音的输出</h1>

<p>Raspberry Pi的声音输出可以有两个方式选择:
&ndash; HDMI:因为HDMI的信号传输可以达到2.25GB/s，而raspberry pi在画面1028p传输过程中加上音频信号都会小于0.5GB/s,选择是不错的选择。
&ndash; 3.5mm音频接口，就普通很多手机的耳机接口。</p>

<h1>Raspberry Pi 2的声音设置</h1>

<ul>
<li>Raspberry Pi2的CPU是BCM2835,我们首先要安装声音工具包<code>sudo apt-get install alsa-utils</code>,不过通常都会有已经安装了.</li>
<li>内核加载声卡: <code>sudo modprobe snd-bcm2835</code></li>
<li>你可以先测试以下是否有声音，当然你首先要接耳机或是音响，另外接的时候注意功率输出。<code>speaker-test</code></li>
<li>如果没有声音，你可以先看看是否音量太底了，你可以用<code>alsamixer</code>进行调节.</li>
<li>一般raspberrypi 默认是使用HDMI输出音频，你如果要切换为3.5mm的音频口，可能需要设置以下了，<code>sudo amixer cset numid=3 1</code>(这里最后一个1则表明耳机，0为自动，2为HDMI)</li>
</ul>


<p>最后你可以单独使用文件测试以下：
<code>sudo aplay /usr/share/sounds/alsa/Front_Center.wav</code></p>

<p>-EOF-</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GOLANG在Fedora21上的部署]]></title>
    <link href="http://hyanwang.github.io/blog/2015/02/19/deploy-golang/"/>
    <updated>2015-02-19T20:34:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2015/02/19/deploy-golang</id>
    <content type="html"><![CDATA[<h1>Golang 在Fedora21上安装</h1>

<p>Fedora21本身就提供了Go的1.3.3版本，虽然没有最新的1.4，但对于开发学习绰绰有余。由于Golang.org等一系列Google服务器被墙，所以<code>go get</code>获取golang.org 资源比较吃力。好在Fedora21镜像自身提供了一些Googlecode上的安装包，因此你只要yum 搜索一下就知道了。</p>

<h2>关于Go的环境变量</h2>

<p>通过yum安装之后，有几个环境变量是没有设置，比如最重要的$GOPATH,还有$GOROOT和$GOBIN.这些之所以要设置这几个环境变量，是因为在开发中我们会经常用到。</p>

<h3>$GOROOT</h3>

<p><code>GOROOT</code>主要是设置为go的安装源代码路径，Fedora21的默认安装路径在<code>/usr/lib/golang</code></p>

<h3>$GOPATH</h3>

<p><code>GOPATH</code>主要是设置Go的开发路径，通常你将在这个路径下进行开发，开发的目录结构则必须包括<code>pkg</code>,<code>src</code>,<code>bin</code>。通常bin则是存放程序编译之后的执行文件。</p>

<h3>$GOBIN</h3>

<p><code>GOBIN</code>为执行文件路径，如果你是管理员权限，可以将路径设置为<code>/bin/</code>或是<code>/usr/bin</code>，当然你如果不是管理员权限，完全可以设置为<code>$GOPATH/bin</code>,最重要的是这样设置之后，必须你将它加入到<code>$PATH</code>里去。</p>

<h1>关于Go的包安装</h1>

<p>一直都不太喜欢go的包管理，主要因为是它没有像ruby那样的方便搜索和版本管理，而且go的包一部分存放在google的服务器上，给下载造成一定困难。特别在包依赖的情况下，你必须另找途径一个个安装。目前除了自己翻墙的解决方法以外，你可以搜索github上的资源单独下载。</p>

<h2>关于Go的IDE</h2>

<p>Go的IDE还是比较多的，最常用的可能是sublime text和vim。 sublime text并没有open source,因此我选择了github的atom和vim。</p>

<h3>vim</h3>

<p>vim的基本插件，yum里有，所以很容易安装，当然懒人总有很多懒人办法，我这里使用的是janus的管理，这使得管理插件更方便，直接clone到.janus目录就可以。</p>

<h3>atom</h3>

<p>atom上的有一个golang-plus的插件用于go的开发，但其中需要安装一些go的扩展，主要有如下几个
&ndash; gocode 用于自动补全，这个github上有
&ndash; goimports 这个在github上也有
&ndash; lint tools 这个需要翻墙安装，否则依赖你要自己找第三方下
&ndash; goimports 这个包在Fedora21里有，可以直接下载。</p>

<p>基本Golang的开发环境就这些，接下来就是学习的过程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm a Docker]]></title>
    <link href="http://hyanwang.github.io/blog/2014/12/25/docker/"/>
    <updated>2014-12-25T12:32:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2014/12/25/docker</id>
    <content type="html"><![CDATA[<h1>I&rsquo;m a Docker</h1>

<p>Docker是以go语言实现的轻量级操作系统虚拟化解决方案.是基于LXC等技术.同时,Docker不需要额外的hypervisor支持,它是内核级的虚拟华,因此可以实现更高的性能和效率.</p>

<p>Docker包含三个基本概念</p>

<h2>Image</h2>

<p>Image就是一个只读的模板.Image可以包含一个完整的OS,里面仅仅安装了Apache或是其他应用程序.</p>

<p>Image可以用来创建Docker&rsquo;s Container.</p>

<p>另外Docker还提供一个简单的机制创建Image或是更新现有的Image.</p>

<h2>Container</h2>

<p>容器是从image创建的运行实例.它可以被启动,停止,删除.每个容易相互隔离.</p>

<p>Image是只读的,container在启动的时候创建一层可写层作为最上层.</p>

<p><strong>由于Container在Image之上,所以要删除Image则需要先删除Containerc</strong></p>

<h2>Repository</h2>

<p>Repository是集中存放image file的场所.
当用户创建自己的image之后,可以使用push命令将它上传到公有或是私有的repository,下次需要时候可以pull下来就可以使用.</p>

<h3>Registry</h3>

<p>Registry存储镜像数据，并且提供pull和push镜像的功能。Registry中镜像是通过Repostory来组织的。</p>

<h2>一些关于docker 的命令</h2>

<h3>在Fedora上配置文件和安装</h3>

<p>首先安装好Docker之后，你需要通过systemd来启动。通过<code>systemctl start
docker</code>,当然你也可以选择开机启动<code>systemctl enable docker</code></p>

<h4>Docker后台的自定义设置</h4>

<p>Fedora在Docker.server中保存其服务启动配置,/etc/systemd/system/multi-user.target.wants/docker.service.
docker.service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>Unit<span class="o">]</span>
</span><span class='line'><span class="nv">Description</span><span class="o">=</span>Docker Application Container Engine
</span><span class='line'><span class="nv">Documentation</span><span class="o">=</span>http://docs.docker.com
</span><span class='line'><span class="nv">After</span><span class="o">=</span>network.target docker.socket
</span><span class='line'><span class="nv">Requires</span><span class="o">=</span>docker.socket
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Service<span class="o">]</span>
</span><span class='line'><span class="nv">Type</span><span class="o">=</span>notify
</span><span class='line'><span class="nv">EnvironmentFile</span><span class="o">=</span>-/etc/sysconfig/docker
</span><span class='line'><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/docker -d -H fd:// <span class="nv">$OPTIONS</span>
</span><span class='line'><span class="nv">LimitNOFILE</span><span class="o">=</span>1048576
</span><span class='line'><span class="nv">LimitNPROC</span><span class="o">=</span>1048576
</span><span class='line'>
</span><span class='line'><span class="o">[</span>Install<span class="o">]</span>
</span><span class='line'><span class="nv">Also</span><span class="o">=</span>docker.socket
</span></code></pre></td></tr></table></div></figure>


<p>/etc/sysconfig/docker</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#-H tcp://ip:port 使用remote api使用的调用参数</span>
</span><span class='line'><span class="c">#你可以通过浏览器访问或是直接程序中访问控制</span>
</span><span class='line'><span class="c">#http://localhost:2375/images/json</span>
</span><span class='line'><span class="nv">OPTIONS</span><span class="o">=</span><span class="s2">&quot;--selinux-enabled -H tcp://0.0.0.0:2375&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>如何删除所有images和container?</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#delete containers</span>
</span><span class='line'>docker rm <span class="k">$(</span>docker ps -q -a<span class="k">)</span>
</span><span class='line'><span class="c">#delete images</span>
</span><span class='line'>docker rmi <span class="k">$(</span>docker images -q -a<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>run一个在container中的一个命令</h3>

<p><code>docker run ubuntu:14.04 /bin/shell</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis at rails ]]></title>
    <link href="http://hyanwang.github.io/blog/2014/12/04/redis/"/>
    <updated>2014-12-04T06:30:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2014/12/04/redis</id>
    <content type="html"><![CDATA[<h1>认识Redis</h1>

<p>Redis是一个高性能的kv数据库.它特点就是在NOSQL和并发快速.之所以快速是因为它将所有的数据都放入内存,因此如何使用变得非常关键.</p>

<h2>redis安装和简单配置</h2>

<h3>install redis</h3>

<p>其实没有没有什么讲的,几乎所有任何的发行版本都已经加入.如果官方下载包也容易,只要<code>make</code>一下就编译完成. 至于时候要<code>make install</code> 自己看着办吧.</p>

<h3>Config redis</h3>

<p>redis的配置文件就ubuntu而言,是在/etc/redis/下,有两个文件,一个是<code>redis.conf</code> 一个是<code>sentinel.conf</code>.</p>

<p>redis.conf  配置redis服务用的.</p>

<figure class='code'><figcaption><span>redis.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Redis 配置文件</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 当配置中需要配置内存大小时，可以使用 1k, 5GB, 4M 等类似的格式，其转换方式如下(不区分大小写)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 1k =&gt; 1000 bytes</span>
</span><span class='line'><span class="c"># 1kb =&gt; 1024 bytes</span>
</span><span class='line'><span class="c"># 1m =&gt; 1000000 bytes</span>
</span><span class='line'><span class="c"># 1mb =&gt; 1024*1024 bytes</span>
</span><span class='line'><span class="c"># 1g =&gt; 1000000000 bytes</span>
</span><span class='line'><span class="c"># 1gb =&gt; 1024*1024*1024 bytes</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 内存配置大小写是一样的.比如 1gb 1Gb 1GB 1gB</span>
</span><span class='line'>
</span><span class='line'><span class="c"># daemonize no 默认情况下，redis不是在后台运行的，如果需要在后台运行，把该项的值更改为yes</span>
</span><span class='line'>daemonize yes
</span><span class='line'>
</span><span class='line'><span class="c"># 当redis在后台运行的时候，Redis默认会把pid文件放在/var/run/redis.pid，你可以配置到其他地址。</span>
</span><span class='line'><span class="c"># 当运行多个redis服务时，需要指定不同的pid文件和端口</span>
</span><span class='line'>pidfile /var/run/redis.pid
</span><span class='line'>
</span><span class='line'><span class="c"># 指定redis运行的端口，默认是6379</span>
</span><span class='line'>port 6379
</span><span class='line'>
</span><span class='line'><span class="c"># 指定redis只接收来自于该IP地址的请求，如果不进行设置，那么将处理所有请求，</span>
</span><span class='line'><span class="c"># 在生产环境中最好设置该项</span>
</span><span class='line'><span class="c"># bind 127.0.0.1</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Specify the path for the unix socket that will be used to listen for</span>
</span><span class='line'><span class="c"># incoming connections. There is no default, so Redis will not listen</span>
</span><span class='line'><span class="c"># on a unix socket when not specified.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># unixsocket /tmp/redis.sock</span>
</span><span class='line'><span class="c"># unixsocketperm 755</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 设置客户端连接时的超时时间，单位为秒。当客户端在这段时间内没有发出任何指令，那么关闭该连接</span>
</span><span class='line'><span class="c"># 0是关闭此设置</span>
</span><span class='line'>timeout 0
</span><span class='line'>
</span><span class='line'><span class="c"># 指定日志记录级别</span>
</span><span class='line'><span class="c"># Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</span>
</span><span class='line'><span class="c"># debug       记录很多信息，用于开发和测试</span>
</span><span class='line'><span class="c"># varbose 有用的信息，不像debug会记录那么多</span>
</span><span class='line'><span class="c"># notice  普通的verbose，常用于生产环境</span>
</span><span class='line'><span class="c"># warning 只有非常重要或者严重的信息会记录到日志</span>
</span><span class='line'>loglevel debug
</span><span class='line'>
</span><span class='line'><span class="c"># 配置log文件地址</span>
</span><span class='line'><span class="c"># 默认值为stdout，标准输出，若后台模式会输出到/dev/null</span>
</span><span class='line'><span class="c">#logfile stdout</span>
</span><span class='line'>logfile /var/log/redis/redis.log
</span><span class='line'>
</span><span class='line'><span class="c"># To enable logging to the system logger, just set &#39;syslog-enabled&#39; to yes,</span>
</span><span class='line'><span class="c"># and optionally update the other syslog parameters to suit your needs.</span>
</span><span class='line'><span class="c"># syslog-enabled no</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Specify the syslog identity.</span>
</span><span class='line'><span class="c"># syslog-ident redis</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Specify the syslog facility.  Must be USER or between LOCAL0-LOCAL7.</span>
</span><span class='line'><span class="c"># syslog-facility local0</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 可用数据库数</span>
</span><span class='line'><span class="c"># 默认值为16，默认数据库为0，数据库范围在0-（database-1）之间</span>
</span><span class='line'>databases 16
</span><span class='line'>
</span><span class='line'><span class="c">################################ 快照  #################################</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 保存数据到磁盘，格式如下:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#   save &lt;seconds&gt; &lt;changes&gt;</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#   指出在多长时间内，有多少次更新操作，就将数据同步到数据文件rdb。</span>
</span><span class='line'><span class="c">#   相当于条件触发抓取快照，这个可以多个条件配合</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#   比如默认配置文件中的设置，就设置了三个条件</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#   save 900 1  900秒内至少有1个key被改变</span>
</span><span class='line'><span class="c">#   save 300 10  300秒内至少有300个key被改变</span>
</span><span class='line'><span class="c">#   save 60 10000  60秒内至少有10000个key被改变</span>
</span><span class='line'>
</span><span class='line'>save 900 1
</span><span class='line'>save 300 10
</span><span class='line'>save 60 10000
</span><span class='line'>
</span><span class='line'><span class="c"># 存储至本地数据库时（持久化到rdb文件）是否压缩数据，默认为yes</span>
</span><span class='line'>rdbcompression yes
</span><span class='line'>
</span><span class='line'><span class="c"># 本地持久化数据库文件名，默认值为dump.rdb</span>
</span><span class='line'>dbfilename dump.rdb
</span><span class='line'>
</span><span class='line'><span class="c"># 工作目录</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 数据库镜像备份的文件放置的路径。</span>
</span><span class='line'><span class="c"># 这里的路径跟文件名要分开配置是因为redis在进行备份时，先会将当前数据库的状态写入到一个临时文件中，等备份完成时，</span>
</span><span class='line'><span class="c"># 再把该该临时文件替换为上面所指定的文件，而这里的临时文件和上面所配置的备份文件都会放在这个指定的路径当中。</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># AOF文件也会存放在这个目录下面</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 注意这里必须制定一个目录而不是文件</span>
</span><span class='line'>dir ./
</span><span class='line'>
</span><span class='line'><span class="c">################################# 复制 #################################</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 主从复制. 设置该数据库为其他数据库的从数据库.</span>
</span><span class='line'><span class="c"># 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># slaveof &lt;masterip&gt; &lt;masterport&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 当master服务设置了密码保护时(用requirepass制定的密码)</span>
</span><span class='line'><span class="c"># slav服务连接master的密码</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># masterauth &lt;master-password&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># 当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 1) 如果slave-serve-stale-data设置为yes(默认设置)，从库会继续相应客户端的请求</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 2) 如果slave-serve-stale-data是指为no，出去INFO和SLAVOF命令之外的任何请求都会返回一个</span>
</span><span class='line'><span class="c">#    错误&quot;SYNC with master in progress&quot;</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>slave-serve-stale-data yes
</span><span class='line'>
</span><span class='line'><span class="c"># 从库会按照一个时间间隔向主库发送PINGs.可以通过repl-ping-slave-period设置这个时间间隔，默认是10秒</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># repl-ping-slave-period 10</span>
</span><span class='line'>
</span><span class='line'><span class="c"># repl-timeout 设置主库批量数据传输时间或者ping回复时间间隔，默认值是60秒</span>
</span><span class='line'><span class="c"># 一定要确保repl-timeout大于repl-ping-slave-period</span>
</span><span class='line'><span class="c"># repl-timeout 60</span>
</span><span class='line'>
</span><span class='line'><span class="c">################################## 安全 ###################################</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 设置客户端连接后进行任何其他指定前需要使用的密码。</span>
</span><span class='line'><span class="c"># 警告：因为redis速度相当快，所以在一台比较好的服务器下，一个外部的用户可以在一秒钟进行150K次的密码尝试，这意味着你需要指定非常非常强大的密码来防止暴力破解</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># requirepass foobared</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 命令重命名.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 在一个共享环境下可以重命名相对危险的命令。比如把CONFIG重名为一个不容易猜测的字符。</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 举例:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 如果想删除一个命令，直接把它重命名为一个空字符&quot;&quot;即可，如下：</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># rename-command CONFIG &quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">################################### 约束 ####################################</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，</span>
</span><span class='line'><span class="c"># 如果设置 maxclients 0，表示不作限制。</span>
</span><span class='line'><span class="c"># 当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># maxclients 128</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key</span>
</span><span class='line'><span class="c"># Redis同时也会移除空的list对象</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 注意：Redis新的vm机制，会把Key存放内存，Value会存放在swap区</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># maxmemory的设置比较适合于把redis当作于类似memcached的缓存来使用，而不适合当做一个真实的DB。</span>
</span><span class='line'><span class="c"># 当把Redis当做一个真实的数据库使用的时候，内存使用将是一个很大的开销</span>
</span><span class='line'><span class="c"># maxmemory &lt;bytes&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 当内存达到最大值的时候Redis会选择删除哪些数据？有五种方式可供选择</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># volatile-lru -&gt; 利用LRU算法移除设置过过期时间的key (LRU:最近使用 Least Recently Used )</span>
</span><span class='line'><span class="c"># allkeys-lru -&gt; 利用LRU算法移除任何key</span>
</span><span class='line'><span class="c"># volatile-random -&gt; 移除设置过过期时间的随机key</span>
</span><span class='line'><span class="c"># allkeys-&gt;random -&gt; remove a random key, any key</span>
</span><span class='line'><span class="c"># volatile-ttl -&gt; 移除即将过期的key(minor TTL)</span>
</span><span class='line'><span class="c"># noeviction -&gt; 不移除任何可以，只是返回一个写错误</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 注意：对于上面的策略，如果没有合适的key可以移除，当写的时候Redis会返回一个错误</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#       写命令包括: set setnx setex append</span>
</span><span class='line'><span class="c">#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span>
</span><span class='line'><span class="c">#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span>
</span><span class='line'><span class="c">#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span>
</span><span class='line'><span class="c">#       getset mset msetnx exec sort</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 默认是:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># maxmemory-policy volatile-lru</span>
</span><span class='line'>
</span><span class='line'><span class="c"># LRU 和 minimal TTL 算法都不是精准的算法，但是相对精确的算法(为了节省内存)，随意你可以选择样本大小进行检测。</span>
</span><span class='line'><span class="c"># Redis默认的灰选择3个样本进行检测，你可以通过maxmemory-samples进行设置</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># maxmemory-samples 3</span>
</span><span class='line'>
</span><span class='line'><span class="c">############################## AOF ###############################</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># 默认情况下，redis会在后台异步的把数据库镜像备份到磁盘，但是该备份是非常耗时的，而且备份也不能很频繁，如果发生诸如拉闸限电、拔插头等状况，那么将造成比较大范围的数据丢失。</span>
</span><span class='line'><span class="c"># 所以redis提供了另外一种更加高效的数据库备份及灾难恢复方式。</span>
</span><span class='line'><span class="c"># 开启append only模式之后，redis会把所接收到的每一次写操作请求都追加到appendonly.aof文件中，当redis重新启动时，会从该文件恢复出之前的状态。</span>
</span><span class='line'><span class="c"># 但是这样会造成appendonly.aof文件过大，所以redis还支持了BGREWRITEAOF指令，对appendonly.aof 进行重新整理。</span>
</span><span class='line'><span class="c"># 你可以同时开启asynchronous dumps 和 AOF</span>
</span><span class='line'>
</span><span class='line'>appendonly no
</span><span class='line'>
</span><span class='line'><span class="c"># AOF文件名称 (默认: &quot;appendonly.aof&quot;)</span>
</span><span class='line'><span class="c"># appendfilename appendonly.aof</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Redis支持三种同步AOF文件的策略:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># no: 不进行同步，系统去操作 . Faster.</span>
</span><span class='line'><span class="c"># always: always表示每次有写操作都进行同步. Slow, Safest.</span>
</span><span class='line'><span class="c"># everysec: 表示对写操作进行累积，每秒同步一次. Compromise.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 默认是&quot;everysec&quot;，按照速度和安全折中这是最好的。</span>
</span><span class='line'><span class="c"># 如果想让Redis能更高效的运行，你也可以设置为&quot;no&quot;，让操作系统决定什么时候去执行</span>
</span><span class='line'><span class="c"># 或者相反想让数据更安全你也可以设置为&quot;always&quot;</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 如果不确定就用 &quot;everysec&quot;.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># appendfsync always</span>
</span><span class='line'>appendfsync everysec
</span><span class='line'><span class="c"># appendfsync no</span>
</span><span class='line'>
</span><span class='line'><span class="c"># AOF策略设置为always或者everysec时，后台处理进程(后台保存或者AOF日志重写)会执行大量的I/O操作</span>
</span><span class='line'><span class="c"># 在某些Linux配置中会阻止过长的fsync()请求。注意现在没有任何修复，即使fsync在另外一个线程进行处理</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 为了减缓这个问题，可以设置下面这个参数no-appendfsync-on-rewrite</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This means that while another child is saving the durability of Redis is</span>
</span><span class='line'><span class="c"># the same as &quot;appendfsync none&quot;, that in pratical terms means that it is</span>
</span><span class='line'><span class="c"># possible to lost up to 30 seconds of log in the worst scenario (with the</span>
</span><span class='line'><span class="c"># default Linux settings).</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as</span>
</span><span class='line'><span class="c"># &quot;no&quot; that is the safest pick from the point of view of durability.</span>
</span><span class='line'>no-appendfsync-on-rewrite no
</span><span class='line'>
</span><span class='line'><span class="c"># Automatic rewrite of the append only file.</span>
</span><span class='line'><span class="c"># AOF 自动重写</span>
</span><span class='line'><span class="c"># 当AOF文件增长到一定大小的时候Redis能够调用 BGREWRITEAOF 对日志文件进行重写</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 它是这样工作的：Redis会记住上次进行些日志后文件的大小(如果从开机以来还没进行过重写，那日子大小在开机的时候确定)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 基础大小会同现在的大小进行比较。如果现在的大小比基础大小大制定的百分比，重写功能将启动</span>
</span><span class='line'><span class="c"># 同时需要指定一个最小大小用于AOF重写，这个用于阻止即使文件很小但是增长幅度很大也去重写AOF文件的情况</span>
</span><span class='line'><span class="c"># 设置 percentage 为0就关闭这个特性</span>
</span><span class='line'>
</span><span class='line'>auto-aof-rewrite-percentage 100
</span><span class='line'>auto-aof-rewrite-min-size 64mb
</span><span class='line'>
</span><span class='line'><span class="c">################################## SLOW LOG ###################################</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Redis Slow Log 记录超过特定执行时间的命令。执行时间不包括I/O计算比如连接客户端，返回结果等，只是命令执行时间</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 可以通过两个参数设置slow log：一个是告诉Redis执行超过多少时间被记录的参数slowlog-log-slower-than(微妙)，</span>
</span><span class='line'><span class="c"># 另一个是slow log 的长度。当一个新命令被记录的时候最早的命令将被从队列中移除</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 下面的时间以微妙微单位，因此1000000代表一分钟。</span>
</span><span class='line'><span class="c"># 注意制定一个负数将关闭慢日志，而设置为0将强制每个命令都会记录</span>
</span><span class='line'>slowlog-log-slower-than 10000
</span><span class='line'>
</span><span class='line'><span class="c"># 对日志长度没有限制，只是要注意它会消耗内存</span>
</span><span class='line'><span class="c"># 可以通过 SLOWLOG RESET 回收被慢日志消耗的内存</span>
</span><span class='line'>slowlog-max-len 1024
</span><span class='line'>
</span><span class='line'><span class="c">################################ VM ###############################</span>
</span><span class='line'>
</span><span class='line'><span class="c">### WARNING! Virtual Memory is deprecated in Redis 2.4</span>
</span><span class='line'><span class="c">### The use of Virtual Memory is strongly discouraged.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Virtual Memory allows Redis to work with datasets bigger than the actual</span>
</span><span class='line'><span class="c"># amount of RAM needed to hold the whole dataset in memory.</span>
</span><span class='line'><span class="c"># In order to do so very used keys are taken in memory while the other keys</span>
</span><span class='line'><span class="c"># are swapped into a swap file, similarly to what operating systems do</span>
</span><span class='line'><span class="c"># with memory pages.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># To enable VM just set &#39;vm-enabled&#39; to yes, and set the following three</span>
</span><span class='line'><span class="c"># VM parameters accordingly to your needs.</span>
</span><span class='line'>
</span><span class='line'>vm-enabled no
</span><span class='line'><span class="c"># vm-enabled yes</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This is the path of the Redis swap file. As you can guess, swap files</span>
</span><span class='line'><span class="c"># can&#39;t be shared by different Redis instances, so make sure to use a swap</span>
</span><span class='line'><span class="c"># file for every redis process you are running. Redis will complain if the</span>
</span><span class='line'><span class="c"># swap file is already in use.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># The best kind of storage for the Redis swap file (that&#39;s accessed at random)</span>
</span><span class='line'><span class="c"># is a Solid State Disk (SSD).</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># *** WARNING *** if you are using a shared hosting the default of putting</span>
</span><span class='line'><span class="c"># the swap file under /tmp is not secure. Create a dir with access granted</span>
</span><span class='line'><span class="c"># only to Redis user and configure Redis to create the swap file there.</span>
</span><span class='line'>vm-swap-file /tmp/redis.swap
</span><span class='line'>
</span><span class='line'><span class="c"># vm-max-memory configures the VM to use at max the specified amount of</span>
</span><span class='line'><span class="c"># RAM. Everything that deos not fit will be swapped on disk *if* possible, that</span>
</span><span class='line'><span class="c"># is, if there is still enough contiguous space in the swap file.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># With vm-max-memory 0 the system will swap everything it can. Not a good</span>
</span><span class='line'><span class="c"># default, just specify the max amount of RAM you can in bytes, but it&#39;s</span>
</span><span class='line'><span class="c"># better to leave some margin. For instance specify an amount of RAM</span>
</span><span class='line'><span class="c"># that&#39;s more or less between 60 and 80% of your free RAM.</span>
</span><span class='line'>vm-max-memory 0
</span><span class='line'>
</span><span class='line'><span class="c"># Redis swap files is split into pages. An object can be saved using multiple</span>
</span><span class='line'><span class="c"># contiguous pages, but pages can&#39;t be shared between different objects.</span>
</span><span class='line'><span class="c"># So if your page is too big, small objects swapped out on disk will waste</span>
</span><span class='line'><span class="c"># a lot of space. If you page is too small, there is less space in the swap</span>
</span><span class='line'><span class="c"># file (assuming you configured the same number of total swap file pages).</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># If you use a lot of small objects, use a page size of 64 or 32 bytes.</span>
</span><span class='line'><span class="c"># If you use a lot of big objects, use a bigger page size.</span>
</span><span class='line'><span class="c"># If unsure, use the default :)</span>
</span><span class='line'>vm-page-size 32
</span><span class='line'>
</span><span class='line'><span class="c"># Number of total memory pages in the swap file.</span>
</span><span class='line'><span class="c"># Given that the page table (a bitmap of free/used pages) is taken in memory,</span>
</span><span class='line'><span class="c"># every 8 pages on disk will consume 1 byte of RAM.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># The total swap size is vm-page-size * vm-pages</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># With the default of 32-bytes memory pages and 134217728 pages Redis will</span>
</span><span class='line'><span class="c"># use a 4 GB swap file, that will use 16 MB of RAM for the page table.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># It&#39;s better to use the smallest acceptable value for your application,</span>
</span><span class='line'><span class="c"># but the default is large in order to work in most conditions.</span>
</span><span class='line'>vm-pages 134217728
</span><span class='line'>
</span><span class='line'><span class="c"># Max number of VM I/O threads running at the same time.</span>
</span><span class='line'><span class="c"># This threads are used to read/write data from/to swap file, since they</span>
</span><span class='line'><span class="c"># also encode and decode objects from disk to memory or the reverse, a bigger</span>
</span><span class='line'><span class="c"># number of threads can help with big objects even if they can&#39;t help with</span>
</span><span class='line'><span class="c"># I/O itself as the physical device may not be able to couple with many</span>
</span><span class='line'><span class="c"># reads/writes operations at the same time.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># The special value of 0 turn off threaded I/O and enables the blocking</span>
</span><span class='line'><span class="c"># Virtual Memory implementation.</span>
</span><span class='line'>vm-max-threads 4
</span><span class='line'>
</span><span class='line'><span class="c">############################### ADVANCED CONFIG ###############################</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 当hash中包含超过指定元素个数并且最大的元素没有超过临界时，</span>
</span><span class='line'><span class="c"># hash将以一种特殊的编码方式（大大减少内存使用）来存储，这里可以设置这两个临界值</span>
</span><span class='line'><span class="c"># Redis Hash对应Value内部实际就是一个HashMap，实际这里会有2种不同实现，</span>
</span><span class='line'><span class="c"># 这个Hash的成员比较少时Redis为了节省内存会采用类似一维数组的方式来紧凑存储，而不会采用真正的HashMap结构，对应的value redisObject的encoding为zipmap,</span>
</span><span class='line'><span class="c"># 当成员数量增大时会自动转成真正的HashMap,此时encoding为ht。</span>
</span><span class='line'><span class="nb">hash</span>-max-zipmap-entries 512
</span><span class='line'><span class="nb">hash</span>-max-zipmap-value 64
</span><span class='line'>
</span><span class='line'><span class="c"># list数据类型多少节点以下会采用去指针的紧凑存储格式。</span>
</span><span class='line'><span class="c"># list数据类型节点值大小小于多少字节会采用紧凑存储格式。</span>
</span><span class='line'>list-max-ziplist-entries 512
</span><span class='line'>list-max-ziplist-value 64
</span><span class='line'>
</span><span class='line'><span class="c"># set数据类型内部数据如果全部是数值型，且包含多少节点以下会采用紧凑格式存储。</span>
</span><span class='line'><span class="nb">set</span>-max-intset-entries 512
</span><span class='line'>
</span><span class='line'><span class="c"># zsort数据类型多少节点以下会采用去指针的紧凑存储格式。</span>
</span><span class='line'><span class="c"># zsort数据类型节点值大小小于多少字节会采用紧凑存储格式。</span>
</span><span class='line'>zset-max-ziplist-entries 128
</span><span class='line'>zset-max-ziplist-value 64
</span><span class='line'>
</span><span class='line'><span class="c"># Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存</span>
</span><span class='line'>activerehashing yes
</span><span class='line'>
</span><span class='line'><span class="c">################################## INCLUDES ###################################</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</span>
</span><span class='line'>
</span><span class='line'><span class="c"># include /path/to/local.conf</span>
</span><span class='line'><span class="c"># include /path/to/other.conf</span>
</span></code></pre></td></tr></table></div></figure>


<p>而sentinel.conf主要作为监控使用, M-S(master,slaves)集群提供了:</p>

<ul>
<li>master存活检测</li>
<li>集群中M-S服务监控</li>
<li>自动故障转移,M-S角色转换等能力,从一个方面说是提高了redis集群的可用性.</li>
</ul>


<p>一般情况下,最小M-S单元各有一个maste和slave组成,当master失效后,sentinel可以帮助我们自动将slave提升为master;有了sentinel组件,可以减少系统管理员的人工切换slave的操作过程.</p>

<figure class='code'><figcaption><span>sentinel.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 首先要设置port</span>
</span><span class='line'>port 26379
</span><span class='line'>
</span><span class='line'><span class="c"># 其次要设置sentinel的监控地址</span>
</span><span class='line'><span class="c"># 第一行配置指示 Sentinel 去监视一个名为 mymaster 的主服务器，</span>
</span><span class='line'><span class="c"># 这个主服务器的 IP 地址为 127.0.0.1 ， 端口号为 6379 ，</span>
</span><span class='line'><span class="c"># 而将这个主服务器判断为失效至少需要 2 个 Sentinel 同意 （只要同意</span>
</span><span class='line'><span class="c"># Sentinel 的数量不达标，自动故障迁移就不会执行）。</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 不过要注意， 无论你设置要多少个 Sentinel 同意才能判断一个服务器失效，</span>
</span><span class='line'><span class="c"># 一个 Sentinel 都需要获得系统中多数（majority） Sentinel 的支持，</span>
</span><span class='line'><span class="c"># 才能发起一次自动故障迁移， 并预留一个给定的配置纪元 （configuration</span>
</span><span class='line'><span class="c"># Epoch ，一个配置纪元就是一个新主服务器配置的版本号）。</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 换句话说， 在只有少数（minority） Sentinel 进程正常运作的情况下，</span>
</span><span class='line'><span class="c"># Sentinel 是不能执行自动故障迁移的。</span>
</span><span class='line'>sentinel monitor mymaster 127.0.0.1 6379 2
</span><span class='line'>sentinel down-after-milliseconds mymaster 60000
</span><span class='line'>sentinel failover-timeout mymaster 180000
</span><span class='line'>sentinel parallel-syncs mymaster 1
</span><span class='line'>
</span><span class='line'>sentinel monitor resque 192.168.1.3 6380 4
</span><span class='line'>sentinel down-after-milliseconds resque 10000
</span><span class='line'>sentinel failover-timeout resque 180000
</span><span class='line'>sentinel parallel-syncs resque 5
</span><span class='line'>
</span><span class='line'><span class="c">#down-after-milliseconds 选项指定了 Sentinel认为服务器已经断线所需的毫秒数。</span>
</span><span class='line'><span class="c">#parallel-syncs 选项指定了在执行故障转移时，最多可以有多少个从服务器同时对新的主服务器进行同步， 这个数字越小，完成故障转移所需的时间就越长。</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ref: http://redis.readthedocs.org/en/latest/topic/sentinel.html</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后,你可以运行<code>sudo redis-sentinel /etc/redis/sentinel.conf</code></p>

<p> Redis-sentinel是Redis实例的监控管理、通知和实例失效备援服务，是Redis集群的管理工具。在一般的分布式中心节点数据库
 中，Redis-sentinel的作用是中心节点的工作，监控各个其他节点的工作情况并且进行故障恢复，来提高集群的高可用性。</p>

<p> Redis-sentinel是Redis的作者antirez在今年6月份完成的，因为Redis实例在各个大公司的应用，每个公司都需要一个Redis集群的管理工具，被迫都自己写管理工具来管理Redis集群，antirez考虑到社区的急迫需要(详情)，花了几个星期写出了Redis-sentinel。</p>

<p> Redis-sentinel的三大功能: * 监测 * 通知 * 自动故障恢复
 首先Redis-sentinel要建立一个监控的master列表，然后针对master列表的每个master获取监控其的sentinels和slaves供以后故障恢复使用</p>

<h2>关于redis监控</h2>

<ul>
<li>redis的系统报告可以使用<code>redis-cli info</code>,<code>redis-cli -h localhost -p 6380 monitor</code></li>
<li>使用redis-benchmark工具,作为性能检测. <code>redis-benchmark -h localhost -p 6379 -c 100 -n 100000</code></li>
<li>一些web方式的监控工具:

<ul>
<li>redis-monitoa: <a href="https://github.com/PrettySimple/redis-monitorr">https://github.com/PrettySimple/redis-monitorr</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[制作octopress]]></title>
    <link href="http://hyanwang.github.io/blog/2014/08/30/make-octopress/"/>
    <updated>2014-08-30T11:37:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2014/08/30/make-octopress</id>
    <content type="html"><![CDATA[<h1>octopress的部署</h1>

<h2>关于octopress的安装</h2>

<p>git octopress</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git  YOUR_DIR
</span></code></pre></td></tr></table></div></figure>


<p>你需要在github页面上的account设置SSH的public key, 所以你这必须是使用<code>ssh-keygen</code>生成public key</p>

<p>并且为了保留原先的markdown文件,所以可以另外设置一个repository,然后设置以下remote,这样可以保留原先的原始文件和修改内容.</p>

<p>另外我们需要安装所需的gem,运行命令<code>bundle install</code>,就可以将Gemfile里的列表安装到电脑里.</p>

<h2>设置基本的octopress</h2>

<p>设置octopress很简单,只要使用两步.</p>

<p>设置你的repository,打命令 <code>rake setup_github_page</code></p>

<p>然后我们只要设置一下配置文件_config.yml就完美了.</p>

<h2>发布你的博客</h2>

<h3>新建博客:</h3>

<p><code>rake new_post[post_name]</code></p>

<h3>生成静态文件</h3>

<p><code>rake generate</code></p>

<h3>发布博客</h3>

<p><code>rake deploy</code></p>

<p>当然有时,rake的版本不对,没关系,你可以使用<code>bundle exec</code>来避免这样的问题.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pow for mac]]></title>
    <link href="http://hyanwang.github.io/blog/2014/03/20/pow-for-mac/"/>
    <updated>2014-03-20T16:30:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2014/03/20/pow-for-mac</id>
    <content type="html"><![CDATA[<h2>Pow 介绍</h2>

<p>Pow 简单的说是一个可以实时快速将rails在mac系统中进行部署测试的插件，你只需要做几个简单设置，就可以通过特定的域名进行访问。</p>

<h2>Pow 安装和配置</h2>

<h3>安装pow</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl get.pow.cx | sh
</span></code></pre></td></tr></table></div></figure>


<h2>卸载pow</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl get.pow.cx/uninstall.sh | sh
</span></code></pre></td></tr></table></div></figure>


<h3>在rvm环境下的配置</h3>

<p>需要在每个app中设置powenv或是powrc</p>

<figure class='code'><figcaption><span>.powenv</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># detect `$rvm_path`</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;${rvm_path:-}&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> -x <span class="s2">&quot;${HOME:-}/.rvm/bin/rvm&quot;</span> <span class="o">]</span>
</span><span class='line'><span class="k">then </span><span class="nv">rvm_path</span><span class="o">=</span><span class="s2">&quot;${HOME:-}/.rvm&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;${rvm_path:-}&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> -x <span class="s2">&quot;/usr/local/rvm/bin/rvm&quot;</span> <span class="o">]</span>
</span><span class='line'><span class="k">then </span><span class="nv">rvm_path</span><span class="o">=</span><span class="s2">&quot;/usr/local/rvm&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># load environment of current project ruby</span>
</span><span class='line'><span class="k">if</span>
</span><span class='line'>  <span class="o">[</span> -n <span class="s2">&quot;${rvm_path:-}&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>  <span class="o">[</span> -x <span class="s2">&quot;${rvm_path:-}/bin/rvm&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>  <span class="nv">rvm_project_environment</span><span class="o">=</span><span class="sb">`</span><span class="s2">&quot;${rvm_path:-}/bin/rvm&quot;</span> . <span class="k">do </span>rvm env --path 2&gt;/dev/null<span class="sb">`</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>  <span class="o">[</span> -n <span class="s2">&quot;${rvm_project_environment:-}&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>  <span class="o">[</span> -s <span class="s2">&quot;${rvm_project_environment:-}&quot;</span> <span class="o">]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;RVM loading: ${rvm_project_environment:-}&quot;</span>
</span><span class='line'>  <span class="se">\.</span> <span class="s2">&quot;${rvm_project_environment:-}&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;RVM project not found at: $PWD&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>.powrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;$rvm_path/scripts/rvm&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> -f <span class="s2">&quot;.rvmrc&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">source</span> <span class="s2">&quot;$rvm_path/scripts/rvm&quot;</span>
</span><span class='line'>  <span class="nb">source</span> <span class="s2">&quot;.rvmrc&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Rails下的分页数据]]></title>
    <link href="http://hyanwang.github.io/blog/2013/11/29/about-pagination-on-rails/"/>
    <updated>2013-11-29T11:11:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/11/29/about-pagination-on-rails</id>
    <content type="html"><![CDATA[<h1>Rails 的分页</h1>

<p>Rails下的分页显示数据的插件有很多，比较常用的是will_paginate，源代码在<a href="http://githubs.com/mislav/will_paginate">mislav的github</a>上去git clone一下。</p>

<h2>如何使用will_paginate呢？</h2>

<p>使用起来没有太多复杂的东西，只需要将<code>Post.all</code>替换成如下就可以</p>

<figure class='code'><figcaption><span>Post Controller</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># :order 作为排序设置</span>
</span><span class='line'><span class="c1"># :per_page 每页的记录</span>
</span><span class='line'><span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">:page</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">,</span><span class="ss">:order</span> <span class="o">=&gt;</span> <span class="s1">&#39;id DESC&#39;</span><span class="p">,</span> <span class="ss">:per_page</span> <span class="o">=&gt;</span> <span class="mi">20</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后下面我们就是设置视图了</p>

<figure class='code'><figcaption><span>index.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">page_entries_info</span> <span class="vi">@posts</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%=</span>
</span><span class='line'><span class="c1">#      :class          =&gt; &#39;pagination&#39;,</span>
</span><span class='line'><span class="c1">#      :previous_label =&gt; nil,</span>
</span><span class='line'><span class="c1">#      :next_label     =&gt; nil,</span>
</span><span class='line'><span class="c1">#      :inner_window   =&gt; 4, # links around the current page</span>
</span><span class='line'><span class="c1">#      :outer_window   =&gt; 1, # links around beginning and end</span>
</span><span class='line'><span class="c1">#      :link_separator =&gt; &#39; &#39;, # single space is friendly to spiders and non-graphic browsers</span>
</span><span class='line'><span class="c1">#      :param_name     =&gt; :page,</span>
</span><span class='line'><span class="c1">#      :params         =&gt; nil,</span>
</span><span class='line'><span class="c1">#      :page_links     =&gt; true,</span>
</span><span class='line'><span class="c1">#      :container      =&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#      具体操作will_paginate / lib / will_paginate / view_helpers.rb 下面则有批注</span>
</span><span class='line'><span class="n">will_paginate</span> <span class="vi">@posts</span><span class="p">,</span> <span class="ss">:previous_label</span> <span class="o">=&gt;</span> <span class="s1">&#39;上一页&#39;</span><span class="p">,</span> <span class="ss">:next_label</span> <span class="o">=&gt;</span> <span class="s1">&#39;下一页&#39;</span><span class="p">,</span> <span class="ss">:container</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>关于css</h2>

<p><a href="http://mislav.uniqpath.com/will_paginate/?page=2">http://mislav.uniqpath.com/will_paginate/?page=2</a> 可以去着网站上下载其分页样式，之后将它放到<code>assets/stylesheets</code>下就可以了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;div class=&#39;digg_pagination&#39;&gt;</span>
</span><span class='line'><span class="x">&lt;div class=&#39;pag_info&#39;&gt;</span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">page_entries_info</span> <span class="vi">@posts</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">will_paginate</span> <span class="vi">@posts</span> <span class="ss">:previous_label</span> <span class="o">=&gt;</span> <span class="s1">&#39;上一页&#39;</span><span class="p">,</span> <span class="ss">:next_label</span> <span class="o">=&gt;</span> <span class="s1">&#39;下一页&#39;</span><span class="p">,</span><span class="ss">:container</span> <span class="o">=&gt;</span> <span class="kp">false</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>-eof-</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[custom library and define constant at rails 4]]></title>
    <link href="http://hyanwang.github.io/blog/2013/09/18/const/"/>
    <updated>2013-09-18T19:57:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/09/18/const</id>
    <content type="html"><![CDATA[<h1>如何设置在rails设置常量</h1>

<h2>initializer目录</h2>

<p>这个是一个初始化目录，里面的所有脚本顾名思义都是在rails初始化执行的。因此在里面创建的所有文件也都将被执行。</p>

<figure class='code'><figcaption><span>创建config.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">raw_config</span><span class="o">=</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rail</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/config/config.yml&quot;</span><span class="p">)</span><span class="c1">#设置yml的文件名和路径</span>
</span><span class='line'><span class="n">erb_result</span><span class="o">=</span><span class="no">ERB</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">raw_config</span><span class="p">)</span><span class="o">.</span><span class="n">result</span>
</span><span class='line'><span class="no">APP_CONFIG</span><span class="o">=</span><span class="no">YAML</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">erb_result</span><span class="p">)</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">]</span><span class="err">＃指定了如何调用常量</span>
</span></code></pre></td></tr></table></div></figure>


<p>设置config.yml</p>

<figure class='code'><figcaption><span>config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span> <span class="nl">&amp;defaults</span>
</span><span class='line'>   <span class="l-Scalar-Plain">redis_server</span><span class="p-Indicator">:</span> <span class="s">&#39;127.0.0.1&#39;</span>
</span><span class='line'>   <span class="l-Scalar-Plain">redis_port</span><span class="p-Indicator">:</span> <span class="s">&#39;6379&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="l-Scalar-Plain">&lt;&lt;</span><span class="p-Indicator">:</span> <span class="err">*</span> <span class="l-Scalar-Plain">defaults</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="l-Scalar-Plain">&lt;&lt;</span><span class="p-Indicator">:</span> <span class="nv">*defaults</span>
</span></code></pre></td></tr></table></div></figure>


<h1>创建自己的library</h1>

<p>其实要在rails下创建自己的library很简单，只需要在<code>/lib/</code> 直接进行添加你创建的ruby文件，那如何引用呢？其实也很简单，只需要在自己的contoller下使用<code>require filename.rb</code>就可以了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails中post]]></title>
    <link href="http://hyanwang.github.io/blog/2013/08/11/rails-post/"/>
    <updated>2013-08-11T22:15:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/08/11/rails-post</id>
    <content type="html"><![CDATA[<h1>Form Helper basic</h1>

<p>view中设置其表单，其中<code>form_tag</code>定义提交给谁和用什么方法</p>

<figure class='code'><figcaption><span>Form表单提交给helo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= form_tag(&quot;helo&quot;,method: &#39;post&#39;) do %&gt;</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">label_tag</span><span class="p">(</span><span class="ss">:search</span><span class="p">,</span> <span class="s2">&quot;search for:&quot;</span><span class="p">)</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;%= text_field_tag(:search) %&gt;</span>
</span><span class='line'><span class="o">&lt;%=</span> <span class="n">submit_tag</span><span class="p">(</span><span class="s2">&quot;Search&quot;</span><span class="p">)</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Controller 如何实现接受</h1>

<p>在接收的方法中使用<code>params[:search]</code></p>

<figure class='code'><figcaption><span>Controller中抓去post值</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">helo</span>
</span><span class='line'><span class="vi">@helo</span><span class="o">=</span><span class="n">params</span><span class="o">[</span><span class="ss">:search</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>route将取决安排程序路径使用什么方法传递</h1>

<figure class='code'><figcaption><span>route.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:admin</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;tasks/helo&#39;</span> <span class="c1">#使用post方式请求</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;tasks/say&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Model-for-rails(2)]]></title>
    <link href="http://hyanwang.github.io/blog/2013/07/15/model-for-rails-2/"/>
    <updated>2013-07-15T15:08:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/07/15/model-for-rails-2</id>
    <content type="html"><![CDATA[<h1>Migeration</h1>

<p>Migeration是一种可以随时改变数据模式的一种途径。通过使用Ruby DSL,从而摆脱了SQL的编写，从而使得数据库独立。Migeration保存着你历史数据结构，ActiveRecord会通过更新<code>db/schema.rb</code>来同步更新你的数据库结构。</p>

<h2>创建一个标准的Migration</h2>

<p>使用<code>rails g migration MIGRATION_NAME</code>用来创建一个标准的空migration.
* 如果你的migration名字是&#8217;AddXXXToyyy&#8217;或是&#8217;RemoveXXXToYYY&#8217;,那么migration会自动在文档里创建<code>add_column</code>或是<code>remove_column</code>
* 如果你的migration名字是&#8217;CreateXXX&#8217;那么他将自动在文档里创建<code>create_table XXX</code></p>

<p>同样如果你的名字是AddXXXRefToYYY,就会自动添加<code>add_reference :xxx, :yyy, index:true</code></p>

<p>如果CreateJoinTableNNNN XXX YYY,则会自动添加<code>create_join_table :xxx,:yyy</code>,实际上，他会生成一张表讲带有xxx_id和yyy_id.</p>

<p>另外可以通过<code>{}</code>来限制起最大值和多态性比如<code>$ rails generate migration AddDetailsToProducts price:decimal{5,2} supplier:references{polymorphic}
</code></p>

<h2>使用change方法</h2>

<p>以下方法支持change</p>

<ul>
<li>add_column</li>
<li>add_index</li>
<li>add_reference</li>
<li>add_timestamps</li>
<li>create_table</li>
<li>create_join_table</li>
<li>drop_table (must supply a block)</li>
<li>drop_join_table (must supply a block)</li>
<li>remove_timestamps</li>
<li>rename_column</li>
<li>rename_index</li>
<li>remove_reference</li>
<li>rename_table</li>
</ul>


<h2>回滚migrations</h2>

<p>每个生成的migration都会根据时间自动生成版本号标签，你可以通过<code>rake db:migrate VERSION=20080906120000</code> 来回到所要的版本号，如果你只是要回滚到最后一个版本，则可以<code>rake db:rollback</code>,或是在最后第三个版本，则可以<code>rake db:rollback STEP=3</code></p>

<h2>REST DB</h2>

<p>REST数据其实很简单，只要执行<code>rake db:rest</code>就可以了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[model for rails(1)]]></title>
    <link href="http://hyanwang.github.io/blog/2013/07/15/model-for-rails-1/"/>
    <updated>2013-07-15T14:20:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/07/15/model-for-rails-1</id>
    <content type="html"><![CDATA[<h1>ActiveRecord Models</h1>

<p>我们可以通过<code>rails g</code>的命令来创建一个Model</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g model User name:string email:string
</span></code></pre></td></tr></table></div></figure>


<p>在<code>/app/models/</code>和<code>/app/db/migration</code>中会创建相应的文件</p>

<h2>Active Record Basic</h2>

<p>Active Record是一个ORM的框架</p>

<h3>命名规范</h3>

<table>
<thead>
<tr>
<th>Model/Class</th>
<th>Table/Schema</th>
</tr>
</thead>
<tbody>
<tr>
<td>Post       </td>
<td>posts</td>
</tr>
<tr>
<td>LineItem   </td>
<td>line_items</td>
</tr>
<tr>
<td>Deer       </td>
<td>deer</td>
</tr>
<tr>
<td>Mouse      </td>
<td>mice</td>
</tr>
<tr>
<td>Person     </td>
<td>people</td>
</tr>
</tbody>
</table>


<h3>支持的数据类型</h3>

<ul>
<li>:binary</li>
<li>:boolean</li>
<li>:date</li>
<li>:datetime</li>
<li>:decimal</li>
<li>:float</li>
<li>:integer</li>
<li>:primary_key</li>
<li>:string</li>
<li>:text</li>
<li>:time</li>
<li>:timestamp</li>
</ul>


<h3>Schema 模式</h3>

<p>外键 Foreign Keys: tablename_id
主键 Primary Keys: 默认为id</p>

<p>另外还会自动创建两个字段 <code>created_at</code> 和<code>updated_at</code></p>

<h3>create or overriding name conventions</h3>

<p>通常我们继承了一个ActiveRecord的类就好比创建了一张表。</p>

<figure class='code'><figcaption><span>Product</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="no">Base</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>类名通常就是这个表的表名，但其实我们可以重新定义。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">changeProduct</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="no">Base</span>
</span><span class='line'>     <span class="nb">self</span><span class="o">.</span><span class="n">table_name</span> <span class="o">=</span> <span class="s2">&quot;Product&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>手动添加primary_key</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set_primary_key</span> <span class="s2">&quot;product_id&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>about CRUD</h3>

<h4>create</h4>

<p>Active Record 对象是用hash来呈现的，使用create方法，将数据保存在数据库中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span><span class="o">=</span><span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Dexter&quot;</span><span class="p">,</span> <span class="ss">location</span><span class="p">:</span> <span class="s2">&quot;mars&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>而如果使用new方法，则只是实例化，并不保存数据,如果你要保存数据，则是<code>user.save</code></p>

<h4>read</h4>

<p>更多的关于read的api，可访问<a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">http://api.rubyonrails.org/classes/ActiveRecord/Base.html</a>
下面一些简单的关于read的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span><span class="o">=</span><span class="no">User</span><span class="o">.</span><span class="n">all</span> <span class="c1">#返回所有的用户信息</span>
</span><span class='line'><span class="n">user</span><span class="o">=</span><span class="no">User</span><span class="o">.</span><span class="n">first</span> <span class="c1">#返回第一条记录</span>
</span><span class='line'><span class="n">david</span><span class="o">=</span><span class="no">User</span><span class="o">.</span><span class="n">find_by_name</span><span class="p">(</span><span class="s1">&#39;David&#39;</span><span class="p">)</span> <span class="c1">#返回第一条叫David的记录</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#按照条件和时间排序搜索</span>
</span><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="ss">occupation</span><span class="p">:</span> <span class="s1">&#39;Code Artist&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s1">&#39;created_at DESC&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>update</h4>

<p>基本和create性质一样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span><span class="o">=</span><span class="no">User</span><span class="o">.</span><span class="n">find_by_</span><span class="o">[</span><span class="no">KEY_NAME</span><span class="o">]</span><span class="p">(</span><span class="s1">&#39;davis&#39;</span><span class="p">)</span> <span class="c1">#KEYNAME所查询的字段名称</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="ss">KEYNAME</span><span class="p">:</span> <span class="s1">&#39;dav&#39;</span><span class="p">)</span> <span class="c1">#更新keyname里的值</span>
</span></code></pre></td></tr></table></div></figure>


<p>若你要更新所有的值，那update_all会很有用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">update_all</span> <span class="s2">&quot;max_login_attempts = 3, must_change_password = &#39;true&#39;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>delete</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_name</span><span class="p">(</span><span class="s1">&#39;David&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">destroy</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何摧毁Rails中的元素]]></title>
    <link href="http://hyanwang.github.io/blog/2013/07/02/destroy/"/>
    <updated>2013-07-02T14:16:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/07/02/destroy</id>
    <content type="html"><![CDATA[<h2>Destroy</h2>

<p>我们往往会生成比如controller,model或是db 文件，但后来发现我们不需要了，想重来，怎么办呢？
所以我们需要destroy</p>

<h2>删除model或是controller</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails destroy model MODEL_NAME|CONTROLLER_NAME
</span></code></pre></td></tr></table></div></figure>


<h2>删除db:migration</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails d migration MIGRATION_NAME
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD:spec_helper]]></title>
    <link href="http://hyanwang.github.io/blog/2013/06/18/tdd-spec-helper/"/>
    <updated>2013-06-18T06:51:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/06/18/tdd-spec-helper</id>
    <content type="html"><![CDATA[<p>Rails 有自带的Test框架，当我们不使用本身框架的时候则在创建controller的时候加入 <code>--no-test-framework</code></p>

<h2>RSpec 生成器</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="ss">rspec</span><span class="p">:</span><span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<h2>集成測試</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rails generate integration_test static_pages
</span></code></pre></td></tr></table></div></figure>


<p>根據<a href="http://railstutorial-china.org/chapter3.html">http://railstutorial-china.org/chapter3.html</a> 中例子，在做TDD環節的時候會說找不到visit這個方法，原因並不是你沒有capybara，而是之前你沒有加載,所以需要修改<code>spec/spec_helper.rb</code></p>

<figure class='code'><figcaption><span>spec/spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="nb">require</span> <span class="s1">&#39;capybara/rails&#39;</span>
</span><span class='line'>   <span class="nb">require</span> <span class="s1">&#39;capybara/rspec&#39;</span>
</span><span class='line'>   <span class="kp">include</span> <span class="ss">Capybara</span><span class="p">:</span><span class="ss">:DSL</span>
</span><span class='line'>   <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>   <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="ss">Capybara</span><span class="p">:</span><span class="ss">:DSL</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails little note 1]]></title>
    <link href="http://hyanwang.github.io/blog/2013/06/17/rails-little-note-1/"/>
    <updated>2013-06-17T16:26:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/06/17/rails-little-note-1</id>
    <content type="html"><![CDATA[<h2>rails cli</h2>

<p>Active Record 支持的数据类型
* :binary
* :boolean
* :date
* :datetime
* :decimal
* :float
* :integer
* :primary_key
* :string
* :text
* :time
* :timestamp</p>

<h3>rails migration</h3>

<p>Migration 是继承 ActiveRecord::Migration 的一个子类，它实现了两个方法： up (执行需要的改变)和 down (恢复所做的改变)
Active Record 提供以下独立于数据库的方法，用来执行普通数据定义任务的方法:
* add_colmn
* add_index
* change_column
* change_table
* create_table
* create_join_table
* drop_table
* remove_column
* remove_index
* rename_column</p>

<figure class='code'><figcaption><span>ruby 创建一个migration</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">generate</span> <span class="n">migration</span> <span class="no">MIGRATION_NAME</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用up/down方法
Migration里面的down方法能复原up方法所造成的变更。也就是说如果执行了up然后 再执行down，那么数据库的schema应该会没有改变。所以说，如果用up建立一个数据表， 就应该在down方法中删除它。明智的做法会使用跟up完全相反的顺便来做这些事情。</p>

<p>回滚（Rolling Back）
另一个常见的任务是回滚最后一个版本。比如你不小心打错了要修正。输入回滚命令时可以 不用输入先前版本的版本号，直接这样就行了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake db:rollback
</span></code></pre></td></tr></table></div></figure>


<p>这样会执行最后一个migration的down方法。如果要恢复多个migrations的话，可以多给 一个STEP参数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake db:rollback <span class="nv">STEP</span><span class="o">=</span>3
</span></code></pre></td></tr></table></div></figure>


<p>这样会执行最后3个migrations的down方法。</p>

<p>要回滚然后重新执行最后一个migration的话可以直接执行db:migrate:redo。如果要回滚 重新执行的不止一个版本时可以用STEP参数，就跟db:rollback的用法一样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake db:migrate:redo <span class="nv">STEP</span><span class="o">=</span>3
</span></code></pre></td></tr></table></div></figure>


<p>这两个rake任务只是用起来比较方便，让你可以不用输入一大串版本号数字。除了输入比较 方便外没有比db:migrate多做什么额外的工作。</p>

<p>4.2 重置数据库
最后是db:reset任务，它会删除数据库，然后重新建立数据库并在重新建立的数据库中 载入当前的schema。</p>

<p>所谓的载入schema跟执行全部的migrations是不一样的，请参照： schema.rb 。</p>

<p>4.3 执行指定的migration
如果你需要执行一个指定的migration的up或down方法，那么你可以用db:migrate:up和 db:migrate:down这两个任务。你只需指定版本号，就可以触发它的up或down方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake db:migrate:up <span class="nv">VERSION</span><span class="o">=</span>20080906120000
</span></code></pre></td></tr></table></div></figure>


<p>以上会执行20080906120000这个版本的migration的up方法。它会去确认这个migration之前有 没有跑过，所以，如果Active Record认为20080906120000已经跑过，那么执行 db:migrate:up VERSION=20080906120000将不会做任何操作。</p>

<h3>rails 删除控制器</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">destroy</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim-split 分屏显示]]></title>
    <link href="http://hyanwang.github.io/blog/2013/06/14/vim-split/"/>
    <updated>2013-06-14T12:43:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/06/14/vim-split</id>
    <content type="html"><![CDATA[<h1>关于vim分屏编辑</h1>

<ul>
<li><p>vim -o file1 file2:水平分割窗口，同时打开file1和file2</p></li>
<li><p>vim -O file1 file2:垂直分割窗口，同时打开file1和file2</p></li>
</ul>


<h2>水平显示</h2>

<ul>
<li>:split(:sp) &mdash; 把当前窗水平分割成两个窗口。(CTRL-W s 或 CTRL-W CTRL-S) 注意如果在终端下，CTRL-S可能会冻结终端，请按CTRL-Q继续。</li>
<li>:split filename &mdash; 水平分割窗口，并在新窗口中显示另一个文件。</li>
<li>:nsplit(:nsp) &mdash; 水平分割出一个n行高的窗口。</li>
<li>:[N]new &mdash; 水平分割出一个N行高的窗口，并编辑一个新文件。 (CTRL-W n或 CTRL-W CTRL-N)</li>
<li>ctrl+w f &mdash;水平分割出一个窗口，并在新窗口打开名称为光标所在词的文件 。</li>
<li>C-w C-^ &mdash; 水平分割一个窗口，打开刚才编辑的文件。</li>
</ul>


<h2>垂直显示</h2>

<ul>
<li>:vsplit(:vsp) &mdash; 把当前窗口分割成水平分布的两个窗口。 (CTRL-W v或CTRL CTRL-V)</li>
<li>:[N]vne[w] &mdash; 垂直分割出一个新窗口。</li>
<li>:vertical 水平分割的命令： 相应的垂直分割。</li>
</ul>


<h2>关闭子窗口</h2>

<ul>
<li>:qall &mdash; 关闭所有窗口，退出vim。</li>
<li>:wall &mdash; 保存所有修改过的窗口。</li>
<li>:only &mdash; 只保留当前窗口，关闭其它窗口。(CTRL-W o)</li>
<li>:close &mdash; 关闭当前窗口，CTRL-W c能实现同样的功能。 (象 :q :x同样工作 )</li>
</ul>


<h2>调整窗口大小</h2>

<ul>
<li>ctrl+w + &mdash;当前窗口增高一行。也可以用n增高n行。</li>
<li>ctrl+w &ndash; &mdash;当前窗口减小一行。也可以用n减小n行。</li>
<li>ctrl+w _ &mdash;当前窗口扩展到尽可能的大。也可以用n设定行数。</li>
<li>:resize n &mdash; 当前窗口n行高。</li>
<li>ctrl+w = &mdash; 所有窗口同样高度。</li>
<li>n ctrl+w _ &mdash; 当前窗口的高度设定为n行。</li>
<li>ctrl+w &lt; &mdash;当前窗口减少一列。也可以用n减少n列。</li>
<li>ctrl+w > &mdash;当前窗口增宽一列。也可以用n增宽n列。</li>
<li>ctrl+w | &mdash;当前窗口尽可能的宽。也可以用n设定列数。</li>
</ul>


<h2>切换和移动窗口</h2>

<p>如果支持鼠标，切换和调整子窗口的大小就简单了。</p>

<ul>
<li>ctrl+w ctrl+w: 切换到下一个窗口。或者是ctrl+w w。</li>
<li>ctrl+w p: 切换到前一个窗口。</li>
<li>ctrl+w h(l,j,k):切换到左（右，下，上）的窗口。</li>
<li>ctrl+w t(b):切换到最上（下）面的窗口。<BR></li>
<li>ctrl+w H(L,K,J): 将当前窗口移动到最左（右、上、下）面。</li>
<li>ctrl+w r：旋转窗口的位置。</li>
<li>ctrl+w T: 将当前的窗口移动到新的标签页上。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RHCE TEST 2012]]></title>
    <link href="http://hyanwang.github.io/blog/2013/06/13/rhce-test-2012/"/>
    <updated>2013-06-13T12:35:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/06/13/rhce-test-2012</id>
    <content type="html"><![CDATA[<h1> 考试环境：</h1>

<ul>
<li>考试为上机考试。</li>
<li>在一台真实机系统中，已经预安装好虚拟机，要求所有的考试题必须在虚拟机中完成。</li>
<li>必须按要求配置好网络。</li>
<li>在iptables配置中如需要拒绝访问，请使用REJECT（考试过程中iptables默认策略均为ACCEPT）</li>
<li>考试过程中，可以选择语言环境为繁体中文</li>
</ul>


<h1>注意：</h1>

<ul>
<li>所有的光盘中的软件包已经在<a href="http://instructor.example.com/pub/rhel6/dvd">http://instructor.example.com/pub/rhel6/dvd</a> 下</li>
<li>你可以用真实机来验证虚拟机中的考试实验是否正确完成.</li>
<li>example.com 域所在网络是192.168.0.0/24; cracker.com域所在的网络是172.16.0.0/16，一般在题意中被要求拒绝的网络。</li>
</ul>


<h1>RHCSA考试题：</h1>

<ul>
<li>配置好你的主机名，ip地址，网关，DNS，要求： 同样可以通过setup命令进行修改</li>
<li>主机名：serverX.example.com</li>
<li>IP:192.168.0.100+X/24</li>
<li>网关：192.168.0.254</li>
</ul>


<figure class='code'><figcaption><span>修改/etc/hosts;/etc/sysconfig/network;/etc/sysconfig/network-script/ifcfg-eth0</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>DNS:192.168.0.254
</span><span class='line'>
</span><span class='line'>    修改hosts文件_vim /etc/hosts_
</span><span class='line'>   192.168.0.XserverX.example.com
</span><span class='line'>
</span><span class='line'>    修改ifcfg-layouteth0   vim /etc/sysconfig/network-scripts/ifcfg-eth0
</span><span class='line'>   <span class="nv">IPADDR</span><span class="o">=</span>192.168.0.X
</span><span class='line'>   <span class="nv">NETMASK</span><span class="o">=</span>255.255.255.0
</span><span class='line'>   <span class="nv">GATEWAY</span><span class="o">=</span>192.168.0.254
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>添加3个用户</li>
<li>用户harry,natasha,tommy</li>
<li>要求harry,natasha用户的附加组为admin组，tommy用户的登陆shell为非交互式shell。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>groupadd admin;useradd -G admin harry; useradd -G admin natasha; useradd -s /sbin/nologin tommy
</span><span class='line'><span class="nv">$ </span>groupadd admin;
</span><span class='line'><span class="nv">$ </span>useradd harry; useradd natasha; useradd -s /sbin/nologin tommy;
</span><span class='line'><span class="nv">$ </span>groupmens -g admin -a harry; groupmens -g admin -a natasha;
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在/home下创建一个目录</li>
<li>目录名为admins</li>
<li>要求所属组为admin组</li>
<li>组成员可以读写，其它用户没有任何权限</li>
<li>同组成员在目录下创建的文件的所属组也为admin组</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir /home/admins;
</span><span class='line'>chgrp admin /home/admins
</span><span class='line'>chmod 2770 /home/admins
</span><span class='line'>chmod 3770 /home/admins
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>以用户harry的身份配置任务计划</li>
<li>每天的14:23分，执行echo hello 命令</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> crontab -u harry -e;
</span><span class='line'>   23  14  *  *  * <span class="nb">echo </span>hello
</span><span class='line'>   chkconfig crond on;#check crond status
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>找出harry拥有的文件，拷贝到目录/opt/dir下</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> find / -user harry -type f -exec cp -rfp <span class="o">{}</span> /opt/dir/ <span class="se">\;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>从文件/root/install.log中找出包含core的行，写入到文件/tmp/testfile中，要求顺序与/root/install.log中一致</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> cat install.log |grep core &gt; /tmp/testfile
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>创建一个100M的交换分区，并开机自动生效，但不影响原有的swap分区</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   fdisk /dev/vda; mkswap /dev/vdaX; swapon /dev/vdaX;partprobe;
</span><span class='line'>    /etc/fstab:
</span><span class='line'>        <span class="nv">uuid</span><span class="o">=</span><span class="s2">&quot;....&quot;</span>   swap  swap defaults 0 0
</span><span class='line'>    check swap: swapon -s
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mamp1.9.5 mysql5.59 and Ruby mysql2]]></title>
    <link href="http://hyanwang.github.io/blog/2013/06/13/mamp1-dot-9-5-mysql5-dot-59-and-ruby-mysql2/"/>
    <updated>2013-06-13T12:20:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/06/13/mamp1-dot-9-5-mysql5-dot-59-and-ruby-mysql2</id>
    <content type="html"><![CDATA[<p>Unfortunately, the most reecent MAMP version (as of March 2011) has upgraded from MySQL 5.1 to MySQL 5.5. And MySQL, in turn, has switched from GNU Make (with ./configure) to CMake (with cmake .).</p>

<ul>
<li>Download Source <a href="http://sourceforge.net/projects/mamp/files/mamp/">http://sourceforge.net/projects/mamp/files/mamp/</a></li>
<li>Unzip Source and copy mysql-5&hellip;..tar.gz</li>
<li>cli:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">class</span><span class="o">=</span><span class="s2">&quot;brush :shell&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /tmp
</span><span class='line'><span class="nv">$ </span>mv /Users/yourname/Desktop/mysql-5.5.9.tar.gz .
</span><span class='line'><span class="nv">$ </span>tar xf mysql-5.5.9.tar.gz
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>mysql-5.5.9
</span><span class='line'><span class="nv">$ </span>sudo port install cmake
</span><span class='line'><span class="nv">$ </span>cmake . -DMYSQL_UNIX_ADDR<span class="o">=</span>/Applications/MAMP/tmp/mysql/mysql.sock <span class="se">\</span>
</span><span class='line'>-DCMAKE_INSTALL_PREFIX<span class="o">=</span>/Applications/MAMP/Library
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>修改编译出错的文件 unittest/mysys/my_atomic-t.c</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'> <span class="n">int64</span> <span class="n">b</span><span class="o">=</span><span class="mh">0x1000200030004000LL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">a64</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*my_atomic_add64(&amp;a64, b);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    ok(a64==b, &quot;add64&quot;);  注释这段代码*/</span>
</span><span class='line'>    <span class="n">ok</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;add64&quot;</span><span class="p">);</span> <span class="cm">/* 添加这句代码，目的是直接返回测试成功结果 */</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>编译源代码</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>make -j 3
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>复制编译好的文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cp libmysql/*.dylib /Applications/MAMP/Library/lib/
</span><span class='line'><span class="nv">$ </span>mkdir -p /Applications/MAMP/Library/include/mysql
</span><span class='line'><span class="nv">$ </span>cp include/* /Applications/MAMP/Library/include/mysql
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>开始安装mysql</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo env <span class="nv">ARCHFLAGS</span><span class="o">=</span><span class="s2">&quot;-arch x86_64&quot;</span> gem install mysql2 -- <span class="se">\</span>
</span><span class='line'>--with-mysql-config<span class="o">=</span>/Applications/MAMP/Library/bin/mysql_config
</span><span class='line'><span class="nv">$ </span>sudo install_name_tool -change <span class="se">\</span>
</span><span class='line'>/tmp/mysql-5.5.9/libmysql/libmysqlclient.16.dylib <span class="se">\</span>
</span><span class='line'>/Applications/MAMP/Library/lib/libmysqlclient.16.dylib <span class="se">\</span>
</span><span class='line'>/opt/local/lib/ruby/gems/1.8/gems/mysql2-0.2.6/lib/mysql2/mysql2.bundle
</span><span class='line'><span class="nv">$ </span>rm -rf /tmp/mysql-5.5.9 /tmp/mysql-5.5.9.tar.gz:
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>TIPS: 使用macport安装.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo port install rb-mysql
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git常用命令]]></title>
    <link href="http://hyanwang.github.io/blog/2013/06/12/g-tips/"/>
    <updated>2013-06-12T11:12:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/06/12/g-tips</id>
    <content type="html"><![CDATA[<h1>建立代码仓库</h1>

<h2>仓库初始化</h2>

<p>init config</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git init
</span></code></pre></td></tr></table></div></figure>


<h2>当前目录被称为工作树</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config --global user.name <span class="s2">&quot;Your Name Comes Here&quot;</span>
</span><span class='line'><span class="nv">$ </span>git config --global user.email you@yourdomain.example.com
</span></code></pre></td></tr></table></div></figure>


<p>设置用户名和邮箱，此信息会保存在每次commit的log中，使用git log察看
常用操作
add commit revert</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add .
</span></code></pre></td></tr></table></div></figure>


<p>将当前目录生成一个快照放到一个临时存储区域，创建索引</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;zh&quot;</span> &gt; .gitignore
</span><span class='line'><span class="nv">$ </span>git add .
</span></code></pre></td></tr></table></div></figure>


<p>忽略zh目录，不要放到当前缓存中更新
有关 gitignore 文件的诸多细节知识可阅读其使用手册: $ man gitignore</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git commit
</span></code></pre></td></tr></table></div></figure>


<p>将索引中的代码提交，可选参数-m &lsquo;messages&#8217;可以增加备注信息，
如果不指定则调用默认的编辑器编辑message</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git revert filename
</span></code></pre></td></tr></table></div></figure>


<p>从代码库中恢复某个文件</p>

<h2>查看日志</h2>

<p>log show</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log
</span></code></pre></td></tr></table></div></figure>


<h2>查看项目的更新记录</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log --stat --summary
</span></code></pre></td></tr></table></div></figure>


<h1>查看每一次版本的大致变动情况</h1>

<h2>项目版本的更新细节:</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git show dfb02e6e4f2f7b573337763e5c0013802e392818
</span></code></pre></td></tr></table></div></figure>


<h2>后面的值为版本号</h2>

<p>除了使用完整的版本号查看项目版本更新细节之外,也还可以使用以下方式:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git show dfb02 <span class="c"># 一般只使用版本号的前几个字符即可</span>
</span><span class='line'><span class="nv">$ </span>git show HEAD <span class="c"># 显示当前分支的最新版本的更新细节</span>
</span></code></pre></td></tr></table></div></figure>


<p>每一个项目版本号通常都对应存在一个父版本号,也就是项目的前一次版本状态。
可使用如下命令查看当前项目版本的父版本更新细节:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git show HEAD^ <span class="c"># 查看 HEAD 的父版本更新细节</span>
</span><span class='line'><span class="nv">$ </span>git show HEAD^^ <span class="c"># 查看 HEAD 的祖父版本更新细节</span>
</span><span class='line'><span class="nv">$ </span>git show HEAD~4 <span class="c"># 查看 HEAD 的祖父之祖父的版本更新细节</span>
</span></code></pre></td></tr></table></div></figure>


<h1>还原代码库</h1>

<p>reset
将代码库还原至某个版本
git-reset 命令有三个选项:&mdash;mixed 、 &mdash;soft 和 &mdash;hard 。我们在日常使用中仅使用前两个选项;</p>

<p>第三个选项由于杀伤力太大,容易损坏项目仓库,需谨慎使用。
&mdash;mixed 是 git-reset 的默认选项,它的作用是重置索引内容,将其定位到指定的项目版本,而不改变你的</p>

<p>工作树中的所有内容,只是提示你有哪些文件还未更新。
&mdash;soft 选项既不触动索引的位置,也不改变工作树中的任何内容,但是会要求它们处于一个良好的次序之内。
该选项会保留你在工作树中的所有更新并使之处于待提交状态。
协同开发
clone pull push</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>work
</span><span class='line'><span class="nv">$ </span>git clone lyr@192.168.0.7:~/work/m2ge m2ge
</span></code></pre></td></tr></table></div></figure>


<p>通过ssh访问远端的某个git目录 将工作树复制到本地，如果不指定文件夹则和远端一致。
ssh 协议： 账户@IP:工作树路径
clone之后 就在本地创建了一个工作目录，所有的提交删除工作都可以在本地进行，不需要频繁操作主分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone lyr@192.168.0.7:~/work/m2ge
</span></code></pre></td></tr></table></div></figure>


<h1>项目开发</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add 增加改动的文件
</span><span class='line'><span class="nv">$ </span>git commit 向本地代码库提交
</span><span class='line'><span class="nv">$ </span>git pull 获取远端代码
</span></code></pre></td></tr></table></div></figure>


<h1>解决版本合并问题</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git push 提交代码到远端库
</span></code></pre></td></tr></table></div></figure>


<p>git的代码是分布式管理的。所以每个机器上都保存了完整的版本库代码。</p>

<h1>建立一个等价库</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir -p ~/project/m2ge.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/project/m2ge.git
</span><span class='line'><span class="nv">$ </span>git --bare init --shared
</span></code></pre></td></tr></table></div></figure>


<h1>分支管理</h1>

<p>branch checkout merge</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch 察看当前分支
</span><span class='line'><span class="nv">$ </span>git branch <span class="nb">local</span> 建立一个分支
</span><span class='line'><span class="nv">$ </span>git checkout <span class="nb">local</span> 切换分支为local， 进行开发工作add commit ...
</span><span class='line'><span class="nv">$ </span>git checkout master 将当前分支切换为master
</span><span class='line'><span class="nv">$ </span>git merge <span class="nb">local</span> 将local分支与当前分支合并
</span><span class='line'><span class="nv">$ </span>git branch -d <span class="nb">local</span> 删除local分支
</span></code></pre></td></tr></table></div></figure>


<p>没有完成merge的分支是无法直接删除的，需要用到-D参数强制删除</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON简述]]></title>
    <link href="http://hyanwang.github.io/blog/2013/06/12/jso/"/>
    <updated>2013-06-12T10:42:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/06/12/jso</id>
    <content type="html"><![CDATA[<p>什么是JSON
<a href="http://www.json.org/json-zh.html">http://www.json.org/json-zh.html</a></p>

<h1>如何加载JSON</h1>

<h2>JAVASCRIPT 对象的表示法</h2>

<p>基本语法: {name: value, name: value, name: value,name: value,}
其中name 表示对象的属性名， 若属性名含空格， 则需引号把盖名称括起来。 value表示属性值， 可以是各种基本数据类型。</p>

<h2>JSON支持的各种数据类型</h2>

<p>Boolean exp: {active:true}
String {title: &ldquo;jquer&rdquo;}
Number {count: 28}
Object {count,result:[12,34]}
Array {values:[1,flase,&ldquo;test&rdquo;[2,3],{2,34}]}
Null 是一个预定义的对象，若通过json表示发送一个null 值，单词null 必须小写才有效</p>

<h2>JQuery使用</h2>

<pre><code>JQuery.getJSON(url[,data][,callback(data, textStatus)])
</code></pre>

<p>url: URL地址
data: 是字符串或映射给通过请求发送到服务器的数据
callback: 是请求成功时执行的回调函数，其参数data表示服务器返回的数据
textStatus: 表示响应状态文本。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php data object]]></title>
    <link href="http://hyanwang.github.io/blog/2013/06/12/php-data-object/"/>
    <updated>2013-06-12T10:17:00+08:00</updated>
    <id>http://hyanwang.github.io/blog/2013/06/12/php-data-object</id>
    <content type="html"><![CDATA[<p>提供了一种数据库无关的机制来在php6中链接、读取和操作各种各样的RDBMS平台。开发者采取一致的方式来跨各个数据库平台操作，从而改进可一致性和可伸缩性，同时不需要非官方的第三方抽象层。</p>

<h1>PDO($dsn);Data Source Name</h1>

<p>格式：</p>

<pre><code>protocol:key=value;key=value...
</code></pre>

<ul>
<li> key: host,username,password,port,dbname</li>
</ul>


<h1>query()</h1>

<p>在PDO类里有一个简单的查询方法query(),并返回PDOStatement类型的实例化类。PDOStatement类起实现了名为Traversible的借口；这意味着它支持直接迭代。 在该类伤迭代产生一系列关联数组，每个数组等于一行输出；但每个关联数组条目同时包含key/value和index/value数据，所以需要 is_numberic() 来过滤index/value.</p>

<h1>PDOStatement类</h1>

<p>永远不会直接创建PDOStatement类。</p>

<h1>prepare()</h1>

<p>prepare() 方法生成了PDOStatement的实例，查询由PDOStatement保存而返回的数据比仅仅直接迭代使实例要复杂。 prepare() 的SQL查询字符串包含了一个未带引号的参数 :username</p>

<h1>prepare和query的差异性</h1>

<ol>
<li> 尽管返回一个PDOStatement的实例，但并没有执行查询。通过分离语句的准备和查询的执行，可以在执行之前进一步地查询该语句</li>
<li> 使用PDOStatement的fetch()来一次性获取数据库返回的每个行数据,而不是用forearch()来迭代PDOStatement的实例.这样可以灵活地传递一个参数:一个常量PDO::FETCH_ASSOC. 这个意味着所返回的数据一个只包含的key/value的数据关联数组,没有以前的混合index/value的数组</li>
<li> 可以方便地每次仅返回一行数据，如果没有其他的行返回，那么fetch()返回false.类似结构化方法fetchAll()可以一次将所有的行返回到包含多个关联数组的耽搁数组中</li>
</ol>


<h1>bindParam()</h1>

<pre><code>bindParam(':username',$strUsername,PDO::PARAM_STR)
</code></pre>

<p>仅仅获得一个变量并将其传递给PDO引擎，从而告诉PDO引擎在何处将其绑定到初始SQL语句。常量PARAM_STR告诉PDO引擎传递参数的字符串。因为应用必要的引号以构造最终的参数是字符串。因为应用必要的引号以构造最终的SQL语句是PDO和RDBMS的责任.</p>

<h1>bindValue()与bindParam()</h1>

<p>bindValue() 不会接受一个PHP变量为参数;相反，它需要硬编码的值作为参数.同样，如果试图将一个硬编码的值传递给bingParam，该方法将失败，它需要一个通过引用传递的变量.
优点：</p>

<ol>
<li> 抽象性</li>
<li> 安全性 不易SQL注入攻击。 将HTTP_POST和GET参数以转义SQL中具有特殊意义的所有字符。 使用一些不常用的非ASCII字符集时容易出错</li>
<li> 可移植性 使用参数化的预置豫剧可以一次性解决这个问题。</li>
<li> 性能 通过使用单条预置语句，底层的数据库能够知道应用程序中某个流行查询在结构上自始至终保持不变</li>
</ol>


<h1>PDOStatement的事务与提交</h1>

<p>默认情况下，PDO假设到数据库的写操作应该是自动提交的。</p>
]]></content>
  </entry>
  
</feed>
